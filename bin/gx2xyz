#!/usr/bin/python
#
# Copyright (c) 2009 Astrid Nikodem, Alexei Matveev
#
# Some Parts derived from a gxfile.py parsing module for ASE (GPL).
#
# This program is free software; you can redistribute it and/or modify
# it under  the terms of the  GNU General Public License  version 2 as
# published by the Free Software Foundation [1].
#
# This program is distributed in the  hope that it will be useful, but
# WITHOUT  ANY   WARRANTY;  without  even  the   implied  warranty  of
# MERCHANTABILITY  or FITNESS FOR  A PARTICULAR  PURPOSE. See  the GNU
# General Public License for more details.
#
# [1] http://www.gnu.org/licenses/gpl-2.0.html
#
# Please see the accompanying LICENSE file for further information.
#
from sys import stdout
import sys
LUNIT = 1.0

#conversion factors for special values
#        length (of bohr unit)
LINX = { 'A' : 0.529177}

DUMMY = 0

SYMLIST = [ 'X', # for dummy atoms
       'H ', 'He', 'Li', 'Be', 'B ', 'C ', 'N ', 'O ', 'F ', 'Ne', 'Na',
       'Mg', 'Al', 'Si', 'P ', 'S ', 'Cl', 'Ar', 'K ', 'Ca', 'Sc', 'Ti', 'V ', 'Cr',
       'Mn', 'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga', 'Ge', 'As', 'Se', 'Br', 'Kr',
       'Rb', 'Sr', 'Y ', 'Zr', 'Nb', 'Mo', 'Tc', 'Ru', 'Rh', 'Pd', 'Ag', 'Cd', 'In',
       'Sn', 'Sb', 'Te', 'I ', 'Xe', 'Cs', 'Ba', 'La', 'Ce', 'Pr', 'Nd', 'Pm', 'Sm',
       'Eu', 'Gd', 'Tb', 'Dy', 'Ho', 'Er', 'Tm', 'Yb', 'Lu', 'Hf', 'Ta', ' W', 'Re',
       'Os', 'Ir', 'Pt', 'Au', 'Hg', 'Tl', 'Pb', 'Bi', 'Po', 'At', 'Rn', 'Fr', 'Ra',
       'Ac', 'Th', 'Pa', 'U ', 'Np', 'Pu', 'Am', 'Cm', 'Bk', 'Cf', 'Es', 'Fm',
       'Md', 'No', 'Lr' ]

def convertgxtoxyz():
    """
    reads in a gxfile type and converts it to a xyz file
    assumes that gxfile is in bohr, if not change lunit
    xyz file is in Angtroms
    """
    filexyz = None
    lout = LINX['A'] #LINA
    lun = LUNIT
    if len(sys.argv) < 2:
        print "ERROR: at least one argument (inputfile) is required\n"
        helpfun()
    else:
        second = 0
        for num in range(1, len(sys.argv)):
            if second == 0 :
                if sys.argv[num].startswith('--'):
                    option = sys.argv[num][2:]
                    if option == 'help':
                        helpfun()
                    elif option == 'n' :
                        lout = LUNIT
                    elif option. startswith('l'):
                        second = 1
                    elif option. startswith('o'):
                        second = 2
                    else:
                        print "ERROR: I don't know this option\n"
                        helpfun()
                else:
                    filegx = sys.argv[num]
                    run(filegx, filexyz, lun, lout, second)
                    second = 3
            elif second == 1:
                second = 0
                opt2 = sys.argv[num-1][3:]
                if opt2 == 'i':
                    lun = LINX[sys.argv[num]]
                elif opt2 == 'o':
                    lout = LINX[sys.argv[num]]
                else:
                    print "ERROR: I don't know this option\n"
                    helpfun()
            elif second == 2:
                second = 0
                filexyz = sys.argv[num]
            else:
                second = 3
                filegx = sys.argv[num]
                run(filegx, filexyz, lun, lout, second)
            if second < 3 :
                print "ERROR: gxfile as input requiered"
                helpfun()


def run(filein, fileout, lun1, lout1, second):
    # reads in data, only atnums and positions are needed
    atnums, positionx, positiony, positionz = gxreadcopy( filein, lun1 )

    if fileout == None:
        write = stdout.write
    else:
        if fileout.endswith('.xyz'):
            pass
        else:
            fileout = fileout + '.xyz'
        if second == 0:
            write = open(fileout,"w").write
        else:
            write = open(fileout,"a").write

    # firsts lines give number of atoms and comment
    write("%i \n" % (len(atnums) ) )
    write("cartesian geometry in Angstrom\n")
    # transforms positions in Angstroms
    for num, value in enumerate(positionx) :
        positionx[num] = value * lout1
    for num, value in enumerate(positiony) :
        positiony[num] = value * lout1
    for num, value in enumerate(positionz) :
        positionz[num] = value * lout1

    # now write data
    for num, data in enumerate(atnums):
        write("%2s " % SYMLIST[data])
        write("%22.12f " % positionx[num] )
        write("%22.12f " % positiony[num] )
        write("%22.12f " % positionz[num] )
        write("\n")

def gxreadcopy( file='gxfile' , lunit=LUNIT ):
    """Read gxfile see ase.optimize.gxfile
    only the geomtry part is needed
     """
    # a generator function:
    def parse(lines):
        # iterator over lines in a file:
        for line in lines:
            fields = _parse_geom(line)
            # stop iterations on negative atomic numbers:
            if fields[0] < 0:  return
            yield fields

    # a generator for lines of the file:
    lines = open(file)

    # force generator to list:
    rows = list( parse(lines) )
    # print "rows=", rows
    # rearrange rows to columns:
    cols = zip( *rows )

    # unpack, we will change the type of "xyz":
    atnums, xa, ya, za, isyms, inums, iconns, ivars = cols
    # lists are much easier to handle than tuples
    x = list(xa)
    y = list(ya)
    z = list(za)

    # convert to 2D array and consider units:
    for num, value in enumerate(x) :
        x[num] = value / lunit
    for num, value in enumerate(y) :
        y[num] = value / lunit
    for num, value in enumerate(z) :
        z[num] = value / lunit
    return atnums, x, y, z


def _parse_geom(line):
    """Parse a line of gxfile in following format:
    ^ 1.00        -5.184294677816         2.993153927796         0.427911418660   5  18     6   1   3     4   7   0
    """
    fields = line.split()
    # print(fields)

    # nuclear charge, may even be fractional, for dummy atoms Z=99:
    atnum = int( float( fields[0] ) )

    # gxfile convention for dummy atoms:
    if atnum == 99.0:
        atnum = DUMMY
    # exit on negative charge:
    if atnum < 0:
        # this is the only usefull field in this line,
        # but there is no use for it here ...
        return ( atnum, None, None, None, None, None )

    # 3D vector of atomic position:
    posx    = float(fields[1])  # yes, three fields 1 <= xyz < 4
    posy    = float(fields[2])
    posz    = float(fields[3])
    # unique atom id, indexing groups of symmetry equivalent atoms:
    isym = int( fields[4] )

    # numeric ID used to define connectiviites:
    inum   = int( fields[5] )

    # connectivities:
    iconn  = [ int(i) for i in fields[6:9] ] # three fields

    # integer lables for "variable" internal coordinates,
    # zero for "constrained" internal coordinates:
    ivar  = [ int(i) for i in fields[9:12] ] # three fields

    return ( atnum, posx, posy, posz, isym, inum, iconn, ivar )


def helpfun():
    print "    This programme converts gxfiles in .xyz files"
    print "    it could run with several arguemts: "
    print "      needed argument is always the gxfile as input file"
    print "      gxfiles are supposed to be in bohr "
    print "      output in the .xyz file will be in Angstrom "
    print "      options have to be put before the input file"
    print "      it is possible to give several input files"
    print "      then the options are for all of them"
    print "      options are: "
    print "        --n     : no conversion from bohr to angstrom"
    print "        --li X  : when reading input file convert lengt with conversion factor for X"
    print "                 conversion factors from dictionary"
    print "                  untill now dictionary includes: "
    print "                      A for Angstrom              "
    print "        --lo X  : other conversion factor for output, conversion like for li"
    print "        --o     : next argument is output file"
    print "                  if not set output goes to standard output"
    print "        --help: show this help text"
    sys.exit()

# main:

convertgxtoxyz()
