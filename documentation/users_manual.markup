<div style="text-align:center; font-weight: bold; font-size:50px">ParaGauss Manuals</div>

<br>

<div style="text-align:center; font-weight: italic; font-size:25px">Th Belling, U Birkenheuer, S Kr&uuml;ger, M Mayer, F N&ouml;rtemann,M Staufer, N R&ouml;sch</div>


<div style="text-align:center; font-size:15px">
ParaGauss Version V19
<br>
Version 1, 05/02/1998
</div>


<div class="so">

= Read Me First =

Description of solvent effect specific options can be found in [[Solvation_Manual| solvation manual]].

----

= How to start ParaGaus: the ttfs Script =

The ttfs script is the driver script of the ParaGauss Program. Calculations can only be started using this script.

== Usage ==

 
  ttfs_[#ttfsopt_version ''version''] \
    [#ttfsopt_name ''name''] \
    [ [#ttfsopt_name_is_extension -name_is_extension] ] \
    [ [#ttfsopt_extend_outputnames -extend_outputnames] ] \
    [ [#ttfsopt_inputdir -inputdir] ''inputdir'' ]  \
    [ [#ttfsopt_outputdir -outputdir] ''outputdir'' ]  \
    [ [#ttfsopt_dir -dir] ''dir'' ] \
    [ [#ttfsopt_newinput -newinput] ''filename'' ]  \
    [ [#ttfsopt_gxfile -gxfile] ''filename'' ] \
    [ [#ttfsopt_restartable -restartable] ] \
    [ [#ttfsopt_save_old_output -save_old_output] ] \
    [ [#ttfsopt_zip -zip] ] \
    [ [#ttfsopt_vpp_mbx_size -vpp_mbx_size]  ''number'' ] \
    [ [#ttfsopt_us -us] |
      [#ttfsopt_pd -pd] ] \
    [ [#ttfsopt_shared_fs -shared_fs]  ''dir'' ] \
    [ [#ttfsopt_recover_in_datadir -recover_in_datadir] ] \
    [ [#ttfsopt_keep_slaveoutput -keep_slaveoutput] ] \
    [ [#ttfsopt_keep_core -keep_core] ]  \
    [ [#ttfsopt_profile -profile] |
      [#ttfsopt_count -count]  ''sourcedir'' |
      [#ttfsopt_vpp_stats -vpp_stats]  ''optionnumber'' ]  \
    [ [#ttfsopt_vers -vers] ''version'' ] \
    [ [#ttfsopt_scriptvers -scriptvers] ''version'' ] \
    [ [#ttfsopt_interfacevers -interfacevers] ''version'' ] \
    [ [#ttfsopt_simolvers -simolvers] ''version'' ]  \
    [ [#ttfsopt_opt -opt] ''geometry optimization program'' ] \
    [ [#ttfsopt_integral -integral] |
      [#ttfsopt_integral_split -integral_split] |
      [#ttfsopt_split -split] | 
      [#ttfsopt_split_scf -split_scf] |
      [#ttfsopt_scf -scf] |
      [#ttfsopt_interfacefile -interfacefile] |
      [#ttfsopt_paragau -paragau] |
      [#ttfsopt_help -help] ]  \
    [ [#ttfsopt_datadir -datadir] ''datadir'' ] \
    [ [#ttfsopt_rm_datadir -rm_datadir] |
      [#ttfsopt_keep_datadir -keep_datadir] ] \
    [ [#ttfsopt_oldinput -oldinput] ''filename'' ]  \
    [ [#ttfsopt_interfaces -interfaces] ''filename'' ]  \
    [ [#ttfsopt_lcgtooptions -lcgtooptions] ''option'' [''option'' ...] ]

For obtaining on-line help:

 
  ttfs_''version'' -help

The options listed above may appear in arbitrary order except for <code>-lcgtooptions</code> that must appear last. All options are optional. The first argument <code>''name''</code> as described below is obligatory.

The following options are SP2-specific:

* [ -us | -pd ]
* [ -shared_fs ''dir'' ]

The following options are VPP-specific:

* [ -profile | -count ''sourcedir'' | -vpp_stats ''optionnumber'' ]
* [ -vpp_mbx_size ''number'' ]

== Location and naming of input and output files ==

The ttfs script offers flexibility in naming and locating input and output files. Principally, two philosophies are supported for separating files of different calculations:

; one specific directory for each calculation
: use <code>''name''</code> to specify directory (absolute path recommended). No file name extensions are necessary.
; several calculations in one directory kept apart by file name extensions.
: use <code>''name''</code> to specify file name extensions and set <code>-name_is_extension</code>. Files are located either in present working directory or the one specified with <code>-dir ''dir''</code>.

Separating input and output directory and naming files individually is also supported via the switches described below.

; <code>''name''</code>
: The meaning differs depending if you set [#ttfsopt_name_is_extension <code>-name_is_extension</code>].
:* In case you do not set this flag, <code>''name''</code> is the default input and output directory of your calculation. Both relative and absolute paths are valid, but the absolute one is recommended. The last part of <code>''name''</code> is also a valid postfix for input files that allows to keep input files for different calculations in one input directory apart. In case you set <code>-extend_outputnames</code> it will also be the postfix to all output files.
:* In case you set this flag, <code>''name''</code> is a postfix to all input and output files. The directory where your input and output files are located is the present working directory unless you specify other with <code>-dir</code> or <code>-inputdir</code> and <code>-outputdir</code>.  Intermediate directories used during the calculation are also termed according to <code>''name''</code>.
; <code>[ -name_is_extension ]</code>
: <code>''name''</code> is not used to set inputdir and outputdir but only as extension to input and output filenames. This implies automatically [#ttfsopt_extend_outputnames <code>-extend_outputnames</code>]. Note that input files without extensions are also accepted if none with extension exist.
; <code>[ -extend_outputnames ]</code>
: use last part of <code>''name''</code> as extension to output files.
; <code>[ -inputdir ''inputdir'' ]</code>
: directory that holds input files. Default is <code>''name''</code>, of if [#ttfsopt_name_is_extension <code>-name_is_extension</code>] is given present working directory.
; <code>[ -outputdir ''outputdir'' ]</code>
: directory where to store output files of new program run. If directory already exists old output files will be overwritten. Default is <code>''name''</code>, of if [#ttfsopt_name_is_extension <code>-name_is_extension</code>] is given present working directory.
; <code>[ -dir ''dir'' ]</code>
: equivalent to <code>[#ttfsopt_inputdir -inputdir] ''dir'' [#ttfsopt_outputdir -outputdir] ''dir''</code>.
; <code>[ -newinput ''filename'' ]</code>
: input file in <code>''inputdir''</code> to new program. Default is file input.
; <code>[ -gxfile ''filename'' ]</code>
: [#gx_file gx file] in <code>''inputdir''</code> containing geometry and Z-matrix for geometry optimization. Default is gx.

== Various useful options ==

; <code>[ -restartable ]</code>
: leave [#gx_file gx file] and scf restart files in place instead of renaming them. This allows to restart calculation without modifying input/output directory. Default is moving these files to protect them from accidental modifications. The switch also implies -save_old_output (see below).
; <code>[ -save_old_output ]</code>
: move old output files (output, input.out, gx.start, trace file) to files with _<code>''number''</code> appended where <code>''number''</code> is the lowest one without existing files. All files of one run will obtain the same <code>''number''</code>.
; <code>[ -zip ]</code>
: compress output files
; <code>[ -vpp_mbx_size ''number'' ]</code>
: set size of mailbox for incoming PVM messages on VPP. ''number'' can take the following values resulting in the given mbx sizes on each host: {|
| 1
| 4 MB
|-
| 4
| 16 MB
|-
| 16
| 64 MB (this is the default)
|-
| 64
| 256 MB
|}
; <code>[ -shared_fs ''dir'' ]</code>
: use <code>''dir''</code> as shared scratch file system on SP2"
; <code>[ -recover_in_datadir ]</code>
: fetch and/or write scf recover files to <code>''datadir''</code> during calculation. Default is to store them in <code>''inputdir''</code> during calculation.

== Debug options ==

; <code>[ -keep_slaveoutput ]</code>
: copy the slave output directories to the directoies termed after the hostnames or 1, 2, ... created in <code>''outputdir''</code>.
; <code>[ -keep_core ]</code>
: keep the core file for debugging in case new program crashes.
; <code>[ -profile ]</code>
: produce profiling information. Perform profiling by statistically recording position of program.

== Selecting versions of called programs ==

The versions of various programs called by the ttfs script can be selected individually. For normal purpose, the defaults should be fine. In most cases, the programs use the same <code>''version''</code> as the <code>ttfs_''version''</code> script.

; <code>[ -vers ''version'' ]</code>
: version of ParaGauss program to use Default is <code>''version''</code> of <code>ttfs_''version''</code> script.
; <code>[ -mpi ]</code>
: take an MPI executable instead of PVM

== Exit status ==

The ttfs script returns zero in case of successful execution and other values in case of errors. In the case of geometry optimization, zero is returned as long as the optimization did not yet converge within the number [[#CONVERGENCE_LIST|MAX_GEO_ITERATION]] of points allowed and 100 if the optimization converged.

This is useful in the case of geometry optimization. If not all the geometry optimization cycles can be performed at once due to time limits of the queue system, the exit status of the ttfs script can be used for automatic resubmission of the job.

The exit status of a program can be obtained via the shell variable "$status" directly after the execution of the program.

== Examples ==

<code> ttfs_[#ttfsopt_version ''version''] [#ttfsopt_name ''name''] </code>

Running a simple calculation with version <code>''version'' </code> of ttfs script. All [#Input_Files input] and [#Output_Files output] files are located in the separate directory <code>''name''</code> that is only used for this calculation. The file names have no postfix extension. Old output files will be overwritten.

<br />

<code> ttfs_[#ttfsopt_version ''version''] [#ttfsopt_name ''name''] [#ttfsopt_name_is_extension -name_is_extension] [#ttfsopt_dir -dir] ''dir'' [#ttfsopt_zip -zip] [#ttfsopt_save_old_output -save_old_output] [#ttfsopt_vers -vers] ''mainversion'' </code>

Running a calculation with version <code>''version'' </code> of ttfs script. All [#Input_Files input] and [#Output_Files output] files are located in directory <code>''dir''</code> that is used for several different calculations. The filenames have the postfix extension <code>''name''</code> that is used to keep the different calculations apart. Output files will automatically be compressed. Old output files of a previous run will be moved to filenames with _''number'' appended with ''number'' being the lowest number not yet used. All files of one run obtain the same ''number''. For instance, the previous output file "output.''name''.gz" would be moved to "output.''name''_''number''.gz". The version <code>''mainversion''</code> of the ParaGauss executable will be used.

<br />

<code> ttfs_[#ttfsopt_version ''version''] [#ttfsopt_name ''name''] [#ttfsopt_restartable -restartable] </code>

Running a geometry optimization calculation with version <code>''version'' </code> of ttfs script. All [#Input_Files input] and [#Output_Files output] files are located in directory <code>''name''</code> that is only used for this calculations. The filenames have no postfix extension. Old output files of a previous run will be moved to filenames with _''number'' appended with ''number'' being the lowest number not yet used. All files of one run obtain the same ''number''. For instance, the previous output file "output" would be moved to "output_''number''". Recover files from the last run are not moved and will be reused as a start for the SCF procedure (See [[#RECOVER_OPTIONS|RECOVER_OPTIONS]]). This is useful when not all the geometry optimization cycles can be performed at once due to time limits of the queue system. The [#ttfs_exit_status exit status] of the ttfs script could be used for automatic resubmission of the job.

<br /><br />

----

<br /><br />

= Input and Output Files =

See chapter "[#ttfs_files location and naming of input and output files]" in the description of the [#ttfs_script ttfs script] for the location of input and output files. "[#ttfsopt_name ''name'']" referenced below is the name of the calculation described there. Input files and intermediate files are allowed to have the postfix extension ".[#ttfsopt_name ''name'']". Output files, intermediate files, and run time control files will also obtain this extension if the flags [#ttfsopt_name_is_extension -name_is_extension] or [#ttfsopt_extend_outputnames -extend_outputnames] were given as arguments to the [#ttfs_script ttfs script].

== Input Files ==

; input
: ParaGauss input file as described [#Input_Description below] The name can be altered by argument [#ttfsopt_newinput -newinput] to the ttfs script.
; gx
: [#gx_file gx file] containing geometry and Z-matrix for [#Geometry_Optimization geometry optimization]. This file will be updated automatically by the geometry optimizer at the end of each geometry loop. The name can be altered by argument [#ttfsopt_gxfile -gxfile] to the ttfs script.
; [#ttfsopt_name ''name''].inp
: Outdated. Input file to old lcgto if previous run of old lcgto is done (See chapter "[#ttfs_lcgto previous execution of old lcgto]" in ttfs script part). The name can be altered by argument [#ttfsopt_oldinput -oldinput] to the ttfs script.

== Output Files ==

; output
: ParaGauss main output file.
; input.out
: This file contains an expanded form of the input. It is in the input format and can directly be used as input for a new run. It protocolls all the options used, also all options implied by defaults. This file can also be used as a starting point for editing. The amount of information written to the file is controlled by the switch ECHO_INPUT_LEVEL in the [[#TASKS|namelist TASKS]].
; trace_output
: This file is used to monitor the progress of the calculation. However, at the end of the calculation it also contains an table giving an overview over the SCF-cycles. Moreover, in the case of [#Geometry_Optimization geometry optimization] the updated [#gx_file gx file] will be appended to this file at the end of each geometry loop (not on the VPP).
; debug_output
: For debug output only. Only generated in case you set IOUNITADMIN_USE_DEBUG in [[#OUTPUT_IOUNITADMIN|namelist OUTPUT_IOUNITADMIN]].
; buggy_log
: For debug output only. Only generated in case you set IOUNITADMIN_USE_BUGGY in [[#OUTPUT_IOUNITADMIN|namelist OUTPUT_IOUNITADMIN]]. This file is well suited for finding the exact location of a program crash since it is always opened and closed.
; gx.start
: When starting a [#Geometry_Optimization geometry optimization], the original [#gx_file gx file] "gx" is copied to "gx.start".
; listing
: The listing of the contents of the temporary directory used by the master during the calculation at the end of the calculation.
; simol/trace_simol
: In case of [#Geometry_Optimization geometry optimization] on the VPP, this file is used to append the output of the optimizer and the updated [#gx_file gx file] at the end of each geometry loop.
; simol/dfp.[#ttfsopt_name ''name'']
: In case of [#Geometry_Optimization geometry optimization], this file is used to append the output of the optimizer at the end of each geometry loop.
; [#ttfsopt_name ''name''].out
: Outdated. Putput file of old lcgto if previous run of old lcgto is done (See chapter "[#ttfs_lcgto previous execution of old lcgto]" in ttfs script part).

== Intermediate Files ==

These files will be located in the input directory in case input and output directories are separate.

During SCF Iterations, it is possible to save and recover the state of the calculation at various points of the SCF loop. This option is both useful for recovering crashed calculations and to save computing time by starting the SCF part with a good approximation of the orbitals when performing a [#Geometry_Optimization geometry optimization]. The files "saved_*.dat" listed below are used for this purpose. The [[#RECOVER_OPTIONS|namelist RECOVER_OPTIONS]] controls if and which files are written / read. The files will automatically be compressed and are binary.

; saved_ksmatrix.dat
: SCF-recover file as described above: hamiltonian
; saved_eigenvec.dat
: SCF-recover file as described above: eigenvectors
; saved_scfstate.dat
: SCF-recover file as described above: charge fit coefficients and exchange part of hamiltonian
; saved_fitcoeff.dat
: SCF-recover file as described above: fit coefficients
; simol
: In case of [#Geometry_Optimization geometry optimization], this directory contains intermediate and output files of the [#simol_program simol program].
; [#ttfsopt_name ''name''].gsn [#ttfsopt_name ''name''].fl9 [#ttfsopt_name ''name''].fl10
: In case of [#Geometry_Optimization geometry optimization], these files are used by the [#simol_program simol program] to store intermediate values.
; interfaces
: Outdated. Interface file produced by old lcgto and read in in case input file contains line "<code>read intermediate input</code>". (See chapter "[#ttfs_lcgto previous execution of old lcgto]" in ttfs script part). The name can be altered by argument [#ttfsopt_interfaces -interfaces] to the ttfs script.
; eigenvectors.dat occ_num.dat
: Outdated. The files "eigenvectors.dat" and "occ_num.dat" are produced by old lcgto. These file may not be compressed. They are only read if integrals are taken from old lcgto as well. (See chapter "[#ttfs_lcgto previous execution of old lcgto]" in ttfs script part).

== Runtime control Files ==

These files will be located in the output directory in case input and output directories are separate.

; trace_output
: This file is used to monitor the progress of the calculation. It is always opened and closed and so always shows the actual task the program is executing. It also contains a table giving an overview over the SCF-cycles.
; scfcontrol
: This file only exist while the SCF part is executed. It is automatically generated and read in each SCF-cycle. It allows to change certain settings made in the input file at run time. It contains the namelists [[#CONVERGENCE_LIST|CONVERGENCE_LIST]], [[#MIXING|MIXING]], [[#RECOVER_OPTIONS|RECOVER_OPTIONS]] and [[#FERMI|FERMI]] described in the [#Input_Description Input Description] below. To abort a running calculation, edit the namelists [[#CONVERGENCE_LIST|CONVERGENCE_LIST]]<nowiki>: Set MAX_ITERATION below the present SCF-cycle number and set STOP_IF_NOT_CONVERGED. </nowiki>

<br /><br />

----

<br /><br />

<div class="so">

= Calculation Modes =

== Standard Mode ==

Needs a willing person to describe

== Scalar Relativity ==

Needs a willing person to describe

== Spin Orbit ==

[[Spin-Orbit]] (SO) calculations is another step further after [#Scalar_Relativity SR] calculations. Up to date it is the only possibility to do single-point SO-calculations.

There are several SO modes possible:

* So-called "plain" spin-orbit where only the kinetic energy and nuclear attraction are corrected for relativistic effects. This is an SO counterpart of SR calculations.
* One can turn relativistic transformations of coulomb (hartree) term on - so called V<sub>ee</sub> run. One can do that to different levels of accuracy:
** first order DK transformation of hartree term
** two flawors of the second order DK

To start an SO calculation one needs:

* make sure that you are going to do a single-point calculation - check namelists [[#OPERATIONS|<tt>OPERATIONS</tt>]] and [[#TASKS|<tt>TASKS</tt>]]
* turn on <tt>RELATIVISTIC</tt> and <tt>SPIN_ORBIT</tt> switches in namelist [[#MAIN_OPTIONS|<tt>MAIN_OPTIONS</tt>]]. Note that SO calculations are always 'spin-restricted' even if 'polarized', so make sure that switch <tt>SPIN_RESTRICTED</tt> is <tt>TRUE</tt> in this namelist.
* in the namelist [[#SPIN_ORBIT|<tt>SPIN_ORBIT</tt>]] specify what level of SO you want.
* you may want to speed up you calculation by setting <tt>XC="...,spatial"</tt> in [[#XC_CONTROL|XC_CONTROL]]
* you may want to set <tt>XC = "vwn,gga:all"</tt> in [[#PHXC_CONTROL|<tt>PHXC_CONTROL</tt>]] namelist

== Usage of functionals ==
</div>

<br /><br />

----

<br /><br />

= Submitting Jobs =



== Power Challenge ==

You must use the queue system to start ParaGauss.

Here is an example script file:

 <nowiki>
 #!/bin/tcsh
 #$ -cwd
 #$ -q para        
 #$ -cwd
 source /etc/cshrc
 source ~/.login
 /home/ttfs/bin.sgi/ttfs_</nowiki>''version name''

Submit this file with the following command: <br /><code>> '''qsub ''time_estimate'' -pe pvm ''proc_nbr script_file'''''</code><br />where

{|
| <code>'''''time_estimate'''''</code>
| is an estimate of the run time in the format "hh:mm"
|-
| <code>'''''proc_nbr'''''</code>
| is the number of processors
|-
| <code>'''''script_file'''''</code>
| is the script file described above. It must be executable.
|}

It might be necessary for huge calculations to make the PVM buffer used by the PVM daemon bigger than the default: In case you obtain error masseges like the following

 
 libpvm [t40002]: da_new() Warning: shared buffer full, using malloc
 libpvm [t40002]: peer_send() Message(s) too long for shared buffer, deadlocked.

... add the following lines to yout "<code>~/.cshrc"</code>" file:

 <nowiki>
 # set larger PVM buffer size for huge jobs
 setenv PVMBUFSIZE 104857600
 </nowiki>

Remove these lines again as soon as your large calculations are complete since you request a vast amount of spoiled memory for each PVM job otherwise.

<br />

= Geometry Optimization =

== gx file ==

This file contains geometry and Z-matrix for the calculated geometry. This file is used to communicate between the ParaGauss program and the geometry optimizer. ParaGauss takes its input geometry from this file. At the end of each geometry loop, ParaGauss appends the calculated energy and gradients to the file. Then it invokes the geometry optimizer that reads in the file, calculates a new geometry and updates the gx file. After that, ParaGauss reads in the file once more at the beginning of the next geometry loop.

== simol program ==

== Optimizer ==

[/home/ttfs/DOCUMENTATION/DOK/optimizer/input_doc.ps find the instructions here ...]

'''Transition state scan sphere model option''' is to be used to locate approximately TS between product and reactant. Geometries of reactant and product should be located in gx.reactant and gx.product files (use of 'ln -s' command is recommended).

To generate initial guess geometry one sets in PG input &tasks task='optimizer' ... / and in optimizer.input &OPERATIONS ... optimization=f, tsscan_mix=t .../. Not that for running this job a regular starting gx-file should be present. After this run a gx.rp_mix file will be generated with intermediate values of internal variables (80% of product and 20% of reactant). If one sets here optimization=t than initial geometry given in regular gx-file will be varied to geometry where all inter-atomic distances have intermediate values (again 80% of product and 20% of reactant). Resulting geometry is in the gxfile or in the last optimizer/gx.out.* file. The key tsscan_mix is set to false for all other tasks of optimizer module.

To find a minimum energy point on a sphere (defined in the internal
coordinates) with a radius equal to the distance from reactant to the
current geometry point one sets in PG input &tasks task='hess,geo'.../
or &tasks task='nohess,geo'.../ and in optimizer.input &OPERATIONS
... optimization=t, tsscan_sphere=t .../. Constrained optimization is
undertaken which preserves a fixed distance to reactant (optimization
of n-1 variables). In general case this distance is defined via sum
over all optimized internal variables. In a recommended specific case
only variables defined via negative values of connectivity indexes of
z-matrix (first 3 field in gx-file internal variables specification).
In optimization protocol one can find calculated values for
grad_max_sphere, grad_mean_sphere and for dEdR_sphere first order
derivatives. Optimization stops when values for grad_max_sphere and
grad_mean_sphere are below convergence criteria for gradients as
default value for ' &CONVERGENCE max_dedr_sphere /' is set to 1.0 and
should be satisfied for any reasonable geometry. If it is set to a
small sensible value than after constrained optimization steps in
direction to reactant will be maid until gradients become larger then
the doubled values of gradient convergence criteria and new
constrained optimization will be undertaken. This actions are repeat
determining reaction path.  In optimizer/flepo.* output files energies
corresponding to constraineIONS ts_search=t ...  /.  For example of
optimizer.input see /home/nasluzov/tsscan_sphere_optimizer.input For
example of gx-file see /home/nasluzov/tsscan_sphere_gxfile

=== Other tasks related to the optimizer and optimizer.input file ===
Together with the frequency calculation in internal coordinates, the [[thermodynamic properties module]] is called, which should substitute the manual spread-sheet-calculations of thermodynamic corrections.

= Input Description =

<br /><br />

----

<br /><br />

==Format==

The input format is intended to be as free as possible.

The following special features are supported:

; Comments
: Everything after character "#" in line is ignored
; Empty lines
: ... are ignored.
; Continuation lines
: The preceding line must contain "%". Everything after this character is ignored and the next line is read. This is helpful when formatting lines containing numbers. Namelist may be written in several lines anyway.
; Include Files
: "~" at the beginning of line followed by filename makes this file to be read. When the end of the include file is reached reading continues in the previous file after the include line. Recursive includes are also allowed, i.e the include files may contain new include directives.
; Masking special characters
: "#", "%" and "\" can be masked with an "\" preceding it.
; Number Formats for Real Numbers
: There are no fixed formats. Any normal notation will be accepted. For instance:
:* 1.001
:* 1
:* 1.0E00-1

<br /><br />

The main building blocks are so called "'''namelists'''" that obey the following rules:

* Namelists start with the character "&" directly followed by the name of the namelist.
* After that there are statements of the kind "''Variable''<nowiki>=</nowiki>''Value''". Where
** ''Variable'' is the name of a variable that is included in the namelist.
** ''Value'' is a value assigned to the variable. The format depends upon the type of the variable used:
*** For Numbers any notation as described above can be used
*** Strings must be quoted. They are case-sensitive.
*** Logicals can be assigned the following values: T F TRUE FALSE .T. .F. .TRUE. .FALSE.
** An arbitrary number of blanks (including 0) is allowed before and after "="
* Statements are separated by one or more of the following items:
** One or more blanks
** the character ","
** A new line
* The first statement and the Namelist name are separated by one or more of the following items:
** One or more blanks
** A new line
* Namelists end with the character "/". Everything after that in the line is ignored. For clarity, it is good practice to repeat the name of the namelist here.
* Namelists may be written in one or more lines.
* Namelists are case-insensitive, i.e. using capital or minor letters makes no difference.
* The order in which the statements appear is free.
* It is not necessary to assign values to all variables in the namelist. Variables that are omitted will be assigned default values. However, certain variables specially denoted in the description of the namelists below do not have default values and need to be specified.

Here is an example:

 
  &NAMELIST_NAME
     int_var=1, REAL_VAR=0.7E1
     String_Var = "Hello"
  /NAMELIST_NAME

<br /><br />

----

<br /><br />

==Syntax==

The input consists of namelists, sometimes directly followed by lines containing lists of numeric parameters (This is mentioned for each of the relevant namelist individually in the [#Explication_of_Namelists explication of namelists] below.).

Most of the namelists can appear in arbitrary order, but some have to appear together in '''blocks with fixed order'''<nowiki>: </nowiki>

; Molecular Geometry
: The namelists [[#UNIQUE_ATOM_NUMBER|UNIQUE_ATOM_NUMBER]] and [[#UNIQUE_ATOM|UNIQUE_ATOM]] have to be grouped together as described with namelist [[#UNIQUE_ATOM_NUMBER|UNIQUE_ATOM_NUMBER]].
; Point Charge Geometry
: The namelists [[#POINTCHARGE_NUMBER|POINTCHARGE_NUMBER]] and [[#POINTCHARGE|POINTCHARGE]] have to be grouped together as described with namelist [[#POINTCHARGE_NUMBER|POINTCHARGE_NUMBER]]
; Basis Set
: The namelists [[#UNIQUE_ATOM_BASISSET|UNIQUE_ATOM_BASISSET]], [[#UNIQUE_ATOM_BASIS|UNIQUE_ATOM_BASIS]] and [[#UNIQUE_ATOM_GLOB_CON|UNIQUE_ATOM_GLOB_CON]] have to be grouped together as described with namelist [[#UNIQUE_ATOM_BASISSET|UNIQUE_ATOM_BASISSET]].
; SCF Grid
: The namelists [[#GRID|GRID]] and [[#GRIDATOM|GRIDATOM]] have to be grouped together as described with namelist [[#GRID|GRID]].
; Post Hoc Grid
: The namelists [[#GRID_PH|GRID_PH]] and [[#GRIDATOM_PH|GRIDATOM_PH]] have to be grouped together as described with namelist [[#GRID_PH|GRID_PH]]. In case this optional block does not appear the settings from the SCF grid are used.
; Output Options
: The namelists [[#OUTPUT|OUTPUT]], [[#OUTPUT_CONFIG|OUTPUT_CONFIG]], [[#OUTPUT_DIPOLE|OUTPUT_DIPOLE]], [[#OUTPUT_INTEGRAL|OUTPUT_INTEGRAL]], [[#OUTPUT_IOUNITADMIN|OUTPUT_IOUNITADMIN]], [[#OUTPUT_POST_HOC|OUTPUT_POST_HOC]], [[#OUTPUT_SCF|OUTPUT_SCF]], [[#OUTPUT_SYM|OUTPUT_SYM]], [[#OUTPUT_TIMING|OUTPUT_TIMING]], [[#OUTPUT_TRACE|OUTPUT_TRACE]], and [[#OUTPUT_UNIQUE_ATOMS|OUTPUT_UNIQUE_ATOMS]] have to be grouped together as described with namelist [[#OUTPUT|OUTPUT]]. In case it appears, the optional namelists [[#OUTPUT|OUTPUT]] must start the block. The remaining optional namelists may appear in arbitrary order.
; Information on Irreps
: This block is only required in the outdated case the new symmetry part is not used. The namelists [[#SYMMETRY_DATA|SYMMETRY_DATA]] and [[#IRREP|IRREP]] have to be grouped together as described with namelist [[#SYMMETRY_DATA|SYMMETRY_DATA]].
; Symmetry Adaption Coefficients
: This block is only required in the outdated case the new symmetry part is not used. The namelists [[#UNIQUE_ATOM_INDP_FCT|UNIQUE_ATOM_INDP_FCT]] and [[#UNIQUE_ATOM_SYMADAPT|UNIQUE_ATOM_SYMADAPT]] have to be grouped together as described with namelist [[#UNIQUE_ATOM_INDP_FCT|UNIQUE_ATOM_INDP_FCT]]. In case no integrals are calculated this block also contains renormalization coefficients.
; The optional user conctrolled population analysis block
: It consist of namelist [[#POPULATION|POPULATION]] followd by possibly several namelists [[#POPCOLUM|POCOLUMN]] as described with namelist [[#POPULATION|POPULATION]].
; The optional fragment orbital analysis block
: It consist of namelist [[#FRAG_ORB_ANALYSIS|FRAG_ORB_ANALYSIS]] followd by namelists [[#FRAGMENT|FRAGMENT]]. as described with [[#FRAG_ORB_ANALYSIS|FRAG_ORB_ANALYSIS]].
; The optional orbital plot block
: It consist of namelist [[#ORBITAL_PLOT|ORBITAL_PLOT]] followd by namelists [[#ORBITAL_LIST|ORBITAL_LIST]] as described with [[#ORBITAL_PLOT|ORBITAL_PLOT]].

Some additional rules concerning the order of the remaining namelists and the blocks listed above have to be observed:

* Either the [[#TASKS|namelist TASKS]] of the outdated [[#OPERATIONS|namelist OPERATIONS]] must start the input. Those namelists are mutually exclusive.
* The [#Molecular_Geometry molecular geometry block] contains the specification of the number of [#Unique_atoms unique atoms]. Thus it must precede the following blocks that need this information:
** [#Basis_Set Basis Set]
** [#SCF_Grid SCF Grid]
** [#Post_Hoc_Grid Post Hoc Gmmetry_Adaption_Coefficients Symmetry Adaption Coefficients]
* The outdated [#Symmetry_Adaption_Coefficients Symmetry Adaption Coefficients] block must be preceded by the following blocks:
** [#Molecular_Geometry Molecular Geometry]
** [#Information_on_Irreps Information on Irreps]
** [#Basis_Set Basis Set]

Each of the blocks listed above and each of the remaining namelist not contained in a block may only appear once.

Most of the namelist and blocks are optional and default values are used if they are omitted. However the following namelist and blocks are required:

* Either the [[#TASKS|namelist TASKS]] of the outdated [[#OPERATIONS|namelist OPERATIONS]] must start the input. Those namelists are mutually exclusive.
* The [#Molecular_Geometry Molecular Geometry] block.
* The [#Basis_Set Basis Set] block.
* The [[#PVMOPTIONS|namelist PVMOPTIONS]] to specify the number of processors.
* The use of the optional [#SCF_Grid SCF Grid] block and the optional [[#MAIN_OPTIONS|MAIN_OPTIONS]] is highly recommended.
* In the outdated case no symmetry part is run the blocks [#Information_on_Irreps Information on Irreps] and [#Symmetry_Adaption_Coefficients Symmetry Adaption Coefficients] are also required.

The outdated use of the Information on Irreps block and the [#Symmetry_Adaption_Coefficients Symmetry Adaption Coefficients] blocks is only allowed in case the symmetry part is not run. (See [[#OPERATIONS|namelist OPERATIONS]].) In this case the [[#SYMMETRY_GROUP|namelists SYMMETRY_GROUP]] is forbidden.

It is possible to convert old lcgto inputs with the help of the [#ttfs_script ttfs script]. In this case an intermediate file will be generated by a special version of lcgto. To read in this intermediate file the input file must contain one line "read intermediate input". The [#Molecular_Geometry Molecular Geometry] block, the [#Basis_Set Basis Set] block, the [#Information_on_Irreps Information on Irreps] block and the [#Symmetry_Adaption_Coefficients Symmetry Adaption Coefficients] block or the [[#SYMMETRY_GROUP|namelists SYMMETRY_GROUP]] must all be omitted since this information will be taken from the intermediate file. Note that other information from the old lcgto input is not converted (for instance: grid, exchange potential ...) and must be specified manually in the input file.

In case of errors in the input file, an error message giving the filename and the line number of the last processed line and showing this line will be produced when the first error is detected and the program will stop. Consecuting errors are not detected.

<br /><br />

----

<br /><br />

==Explication of Namelists==

The [#Namelist_Format format of namelists] is described above.

<br /><br />

===CONVERGENCE_LIST===

This namelist sets convergence criteria for SCF procedure and geometry optimization.

 
  &CONVERGENCE_LIST
     MAX_ITERATION         =       100 # (the default)
     ENERGY_CRITERION      = 1.000E-05 # (the default)
     ENERGY_DEV_CHECKED    =         4 # (the default)
     COEFF_CRITERION       = 1.000E-05 # (the default)
     COEFF_DEV_CHECKED     =         1 # (the default)
     COULOMB_CRITERION     = 1.000E-05 # (the default)
     COULOMB_DEV_CHECKED   =         0 # (the default)
     DENSITY_CRITERION     = 1.000E-05 # (the default)
     DENSITY_DEV_CHECKED   =         1 # (the default)
     MAX_GEO_ITERATION     =         1 # (the default)
     STOP_IF_NOT_CONVERGED =     FALSE # (the default)
  /CONVERGENCE_LIST (namelist may be dropped)

; MAX_ITERATION
: Maximal number of SCF cycles allowed.
; ENERGY_CRITERION
: Maximal difference in total energy for the last ENERGY_DEV_CHECKED SCF cycles.
; ENERGY_DEV_CHECKED
: Check energy criterion for the last ENERGY_DEV_CHECKED SCF cycles. Setting to 0 switches off criterion.
; COEFF_CRITERION
: Maximal difference in charge fit coefficients for the last COEFF_DEV_CHECKED SCF cycles.
; COEFF_DEV_CHECKED
: Check charge fit coefficient criterion for the last COEFF_DEV_CHECKED SCF cycles. Setting to 0 switches off criterion.
; COULOMB_density of two SCF cycles is required to be below this limit.
; COULOMB_DEV_CHECKED
: Check coulomb criterion for the last COULOMB_DEV_CHECKED SCF cycles. Setting to 0 switches off criterion.
; DENSITY_CRITERION
: Maximal difference in density matrix for the last DENSITY_DEV_CHECKED SCF cycles
; DENSITY_DEV_CHECKED
: Check density criterion for the last DENSITY_DEV_CHECKED SCF cycles. Setting to 0 switches off criterion.
; MAX_GEO_ITERATION
: Maximal number of geometry optimization cycles allowed
; STOP_IF_NOT_CONVERGED
: Abort calculation if no SCF convergence was reached

<br /><br />

===EFIELD===

Allows to apply homogeneous external electrical field. The field applied must conserve the [[#SYMMETRY_GROUP|selected symmetry]].

Note that the calculation of gradients of the external electrical field are not yet implemented and only single point calculations are possible.

 
  &EFIELD
     APPLY              =        FALSE # (the default)
     REVERSE_FOR_SPINS  =        FALSE # (the default)
  /EFIELD (namelist may be dropped)
    0.000000       0.000000       0.000000

; APPLY
: Switch on electrical field.
; REVERSE_FOR_SPINS
: Apply the field in opposite direction for second spin in the case of an open shell calculation. (Unphysical !)

The namelist must directly be followed by a line containing the field vector of the electrical field ([au], free format).

<br /><br />

===DIPOLE_TRANSITIONMOMENTS===

This namelist selects which dipole transition moments should be printed.

There is also the possibility to create intensities for Xray Emission Spectra (XES). The Xray emission is caused by the recombination of a valence orbital and a previously generated core hole. In the theoretical approach the calculation is performend in the frozen orbital groundstate approximation. The data will be written to the file xes.dat in the output directory and will contain 2 columns. The columns are the Kohn Sham eigenvalue (in au) of the valence orbital and the intensity. The intensity is calculated, according to Fermi's Golden rule as the product of the square of the dipole transition matrix element and the difference between the core orbital and the valence orbital to the power 4..

This namelist only has effects if dipole calculation are switched on in namelist [[#TASKS|TASKS]] or [[#OPERATIONS|OPERATIONS]] or [[#PROPERTIES|PROPERTIES]] and [[#OUTPUT_DIPOLE|OUTPUT_DIPOLE_TRANSITIONM_F]] is switched on as well.

 
  &DIPOLE_TRANSITIONMOMENTS
     SHOW_VALENCE_EXCITATIONS      =         TRUE # (the default)
     SHOW_CORE_EXCITATIONS         =        FALSE # (the default)
     MAX_VALENCE_EXCITATION_ENERGY =     10.00000 # (the default)
     CORE_EXCITATION_FROM_E_MIN    =      0.00000 # (the default)
     CORE_EXCITATION_FROM_E_MAX    =      0.00000 # (the default)
     CORE_EXCITATION_TO_E_MIN      =      0.00000 # (the default)
     CORE_EXCITATION_TO_E_MAX      =      0.00000 # (the default)
     MAKE_XES_SPECTRA              =        FALSE # (the default)
     CORE_HOLE_IRREP               =            0 # (the default)
     CORE_HOLE_SPIN                =            0 # (the default)
     CORE_HOLE_PARTNER             =            0 # (the default)
     I_CORE_HOLE                   =            0 # (the default)
     X                             =      0.00000 # (the default)
     Y                             =      0.00000 # (the default)
     Z                             =      0.00000 # (the default)
  /DIPOLE_TRANSITIONMOMENTS

To select valence excitations from occupied to empty orbitals, set SHOW_VALENCE_EXCITATIONS. All Excitations up to MAX_VALENCE_EXCITATION_ENERGY will be printed. [eV]

To select core excitations, set SHOW_CORE_EXCITATIONS. All excitation from orbitals in the energy range between CORE_EXCITATION_FROM_E_MIN and CORE_EXCITATION_FROM_E_MAX to orbitals in the energy range between CORE_EXCITATION_TO_E_MIN and CORE_EXCITATION_TO_E_MAX are printed. [eV]

; MAKE_XES_SPECTRA
: Calculate a XES spectrum. The (imaginary) core hole is defined by the next 4 items.
; CORE_HOLE_IRCORE_HOLE_PARTNER
: Partner of the core hole.
; I_CORE_HOLE
: Number of the core hole within the irrep.
; X,Y,Z
: Unity vector, pointing in the direction of the Efield vector of the emitted light.

<br /><br />

===FERMI===

This namelist controls level broadening in the SCF procedure. Default is no level broadening.

 
  &FERMI
     FERMI_GAUSS           =     FALSE # (the default)
     FERMI_FERMI           =     FALSE # (the default)
     FERMI_SINUS           =     FALSE # (the default)
     FERMI_ENERGY_RANGE    =   0.00000 # (the default)
     FERMI_SIGMA           =   0.00000 # (the default)
     FERMI_CUTOFF          =   5.00000 # (the default)
     FERMI_FIX_UP_AND_DOWN =     FALSE # (the default)
     FERMI_COMMON_EF       =      TRUE # (the default)
     FERMI_UNPAIRED        =         0 # (the default)
     FERMI_NEWTON_MAX      =       100 # (the default)
     FERMI_ACCURACY        = 1.000E-10 # (the default)
     FERMI_LEVEL_BROAD     =     FALSE # (the default) outdated
  /FERMI (namelist may be dropped)

; FERMI_GAUSS
; FERMI_FERMI
; FERMI_SINUS
; FERMI_ENERGY_RANGE
; FERMI_SIGMA
; FERMI_CUTOFF
; FERMI_FIX_UP_AND_DOWN
; FERMI_COMMON_EF
; FERMI_UNPAIRED
; FERMI_NEWTON_MAX
; FERMI_ACCURACY
; FERMI_LEVEL_BROAD

<br /><br />

===FRAGMENT===

Describes one fragment used in the fragment orbital analysis described together with namelist [[#FRAG_ORB_ANALYSIS|FRAG_ORB_ANALYSIS]].

Must directly follow this namelist and appear [[#FRAG_ORB_ANALYSIS|N_FRAGMENTS]] times.

 
  &FRAGMENT
     N_ATOMS = 3
  /FRAGMENT
  1  4  8

; N_ATOMS
: number of atoms included in the fragment

Must be followed by a line containing the indices (integer format) of the included atoms. The indices refer to the number of the unique atom.

<br /><br />

===                  FRAG_ORB_ANALYSIS          ===

Main namelist for doing a fragment orbital analysis.

The fragment orbital analysis is only performed, if FRAG_ORB_ANALYSIS is set to true in the [[#PROPERTIES|namelist PROPERTIES]]. The system under study must be divided into a arbitrary number of fragments by the user. Every atom of the complete system must be in exactly on fragment. The position of the atoms in the fragments must be the same as in the complete system. Of course all input parameters have to be the same in all inputs. The complete system and all fragments have to be calculated separately. Important: Set SAVE_EIGENVEC and SAVE_EIGENVEC_ALL to true [([#RECOVER_OPTIONS|namelist RECOVER_OPTIONS]]) For every FRAGMENT one needs the file "saved_fragment.dat". This can be obtained by setting SAVE_AS_FRAGMENT to true [([#RECOVER_OPTIONS|namelist RECOVER_OPTIONS]]) during a normal single point or gradient run or during a properties run.

To do the actual fragment orbital analysis, for the complete system the file "saved_eigenvec.dat" and for every fragment a file "saved_fragment.dat''n'' (''n'' is the number of the fragment) must be in the input directory. The user is responsible for the correct names of the files.

 
  &FRAG_ORB_ANALYSIS
     N_FRAGMENTS =  0 # (the default)
     POP_LIMIT   =  1.000E-02 # (the default)
     EIG_MIN     = -1.000E+02 # (the default)
     EIG_MAX     =  1.000E+01 # (the default)
  /FRAG_ORB_ANALYSIS

; N_FRAGMENTS
: number of fragments.
; POP_LIMIT
: Threshold: If the contribution of a fragment orbital to a orbital is below POP_LIMIT, then this contribution will not be listed in the output.
; EIG_MIN
: Minimal eigenvalue (in eV), which will be considered in the fragment orbital analysis.
; EIG_MAX
: Maximal eigenvalue (in eV), which will be considered in the fragment orbital analysis.

For every of the N_FRAGMENTS fragment a namelist [[#FRAGMENT|namelist FRAGMENT]] and a input line containing integer numbers must follow. <br />Example:

 
  &FRAG_ORB_ANALYSIS
     N_FRAGMENTS =  3 
     POP_LIMIT   =  1.000E-02
     EIG_MIN     = -1.000E+02
     EIG_MAX     =  1.000E+01 
  /FRAG_ORB_ANALYSIS 
  &FRAGMENT n_atoms=4 /
  2  5  6  7
  &FRAGMENT n_atoms=3 / 
  1  4  8
  &FRAGMENT n_atoms=1 /
  3

Fragment one co 1, 4 and 8 and fragment 3 atom 3.

<br />

As a result one gets for every orbital (between EIG_MIN and EIG_MAX) the Mulliken populations in terms of the fragment orbitals. A sample ouput for two fragments:

<br />

 
   162  57 A1     1 2.0000    -12.093438
   Fragment:    1      Sum: 0.8601845
   4/ 0.2945/-0.5773   5/ 0.5566/ 0.6890   6/ 0.0082/-0.0819   8/ 0.0010/ 0.0220
   Fragment:    2      Sum: 0.1418295
   53/ 0.0050/ 0.0605  54/ 0.0353/-0.1610  55/ 0.0104/-0.0927  56/ 0.0405/-0.1856
   57/ 0.0051/ 0.0637
   58/ 0.0051/ 0.0606  59/ 0.0033/ 0.0511  60/ 0.0073/ 0.0782  61/ 0.0120/ 0.0923
   62/ 0.0014/ 0.0424

<br />

; First line:
: The number of the orbital, the number within the irrep, the irrep, the spin, the occupation and the eigenvalue (eV).
; Second line:
: Number of the fragment, total contribution of the fragment to the orbital
; Next line:
: Composition of the orbital: number of the fragment orbital/Mulliken population/MO coefficient ... <br /> The MO coefficient may help to decide if a orbital interaction is bonding or antibonding.
; ...

<br /><br />

===                  GRID          ===

This optional namelists starts the specification of the grid used in the SCF part. If no Post Hoc grid is specified, the SCF grid is used in the Post Hoc Part as well.

This namelist may only appear after the number of unique atoms was specified in [[#UNIQUE_ATOM_NUMBER|namelists UNIQUE_ATOM_NUMBER]]. The grid must be specified together in one block. In case the optional [[#GRIDATOM|namelist GRIDATOM]] appears, it must directly follow this namelist [[#UNIQUE_ATOM_NUMBER|N_UNIQUE_ATOMS]] times. Namelist GRID may also be omitted and grid specification be started with [[#GRIDATOM|namelist GRIDATOM]].

Though there are default settings and grid specification is optional, it is highly recommended to do so.

 
  &GRID
     SYM_REDUCE   = FALSE # (the default)
     WEIGHT_GRADS = FALSE # (the default)
  /GRID (namelist may be dropped)

; SYM_REDUCE
: If set to true, the local symmetry of a atom will be fully exploided to reduce the size of the integration grid. This may save a lot of CPU time. But be carefull: This option is not fully tested. Together with WEIGHT_GRADS=.true. no problems should occur, but if WEIGHT_GRADS is set to false, a rotation of the grid may take place and lead to a slight change of the total energy.
; WEIGHT_GRADS
: If set to true, the derivatives of weights of the integration grid will be considered in the calculation of the energy gradients with respect to nuclear displacements. The agreement between total energy and gradients will be increased by this option. As a price the CPU time consumption is rising. Attention: This switch affects the orientation and the construction of the POST_HOC and the SCF grid (no rotational invariannce, no BECKE scaling). If you are calculating binding energies, in all inputs WEIGHT_GRADS should be set uniformly to true (or false), also if you are not calculating GRADIENTS or the POST_HOC part. Note that you may set this switch here or in [[#GRID_PH|namelist GRID_PH]] but it will always affect both grid parts.

<br /><br />

===                  GRIDATOM          ===

This optional namelists specifies the grid for one unique atom used in the SCF part. If no Post Hoc grid is specified, the SCF grid is used in the Post Hoc Part as well.

This optional namelist may only appear after the number of unique atoms was specified in [[#UNIQUE_ATOM_NUMBER|namelists UNIQUE_ATOM_NUMBER]] and appear [[#UNIQUE_ATOM_NUMBER|N_UNIQUE_ATOMS]] times in direct consecution. In case the optional [[#GRID|namelist GRID]] appears, it must directly precede this namelist since the grid must be specified together in one block.

Though there are default settings and grid specification is optional, it is highly recommended to do so.

 
  &GRIDATOM # unique atom   1
     NRAD    =         30 # (the default)
     NANG    =        131 # (the default)
     NPART   =          1 # (the default)
     RADIUS  = 0.00000000 # (the default)
     RSLATER    FALSE # (the default)
     RIONIC  =      FALSE # (the default)
  /GRIDATOM

; NRAD
: NRAD determines the number of shells of the integration grid. A larger number leads to a better grid. The minimal value is 10. You are on the save side, if you choose 50 as a standard value and 70 for hydrogen and heavy elements (Au,...).
; NANG
: NANG determines the number of grid points per shell. Valid values are 31,51,71,91,111,131,151,171,191,231 and 291. A higher value leads to a better grid. A good choice is 171 for all atoms.
; NPART
: It is possible to use different NANG values in dependence from the distance to the nucleus. NPART is the number of domains and must be 1 or 5. As a result near the nucleus the grid will be rather sparse but in the outer regions very good.
; RADIUS
: Radius of the atom (in au), which will be used for the generation of the grid. Usually it has not to be specified.
; RSLATER
: If true (the default), atomic radii from Slater will be used for the generation of the grid.
; RPOPLE
: If true, atomic radii from POPLE will be used for the generation of the grid.
; RIONIC
: If true, iionic radii will be used for the generation of the grid. This can be used, if one wants to calculate very ionic systems. But be carefull: The NRAD parameter has to be increased to keep the total number of shells constant.

<br /><br />

===                  GRID_PH          ===

This optional namelists starts the specification of the grid used in the Post Hoc part. If no Post Hoc grid is specified, the SCF grid is used in the Post Hoc Part as well. If you are calculating energy gradients, it is strongly recommended to use in the Post Hoc part the same grid as in the SCF part.

This namelist may only appear after the number of unique atoms was specified in [[#UNIQUE_ATOM_NUMBER|namelists UNIQUE_ATOM_NUMBER]]. The grid must be specified together in one block. In case the optional [[#GRIDATOM_PH|namelist GRIDATOM_PH]] appears, it must directly follow this namelist [[#UNIQUE_ATOM_NUMBER|N_UNIQUE_ATOMS]] times. Namelist GRID_PH may also be omitted and grid specification be started with [[#GRIDATOM_PH|namelist GRIDATOM_PH]].

 
  &GRID_PH
     SYM_REDUCE   = FALSE # (the default)
     WEIGHT_GRADS = FALSE # (the default)
  /GRID_PH

See [[#GRID|namelist GRID]] for a description of these switches..

<br /><br />

===                  GRIDATOM_PH          ===

This optional namelists specifies the grid for one unique atom used in the Post Hoc part. If no Post Hoc grid is specified, the SCF grid is used in the Post Hoc Part as well.

This optional namelist may only appear after the number of unique atoms was specified in [[#UNIQUE_ATOM_NUMBER|namelists UNIQUE_ATOM_NUMBER]] and appear [[#UNIQUE_ATOM_NUMBER|N_UNIQUE_ATOMS]] times in direct consecution. In case the optional [[#GRID_PH|namelist GRID_PH]] appears, it must directly precede this namelist since the grid must be specified together in one block.

 
  &GRIDATOM_PH # unique atom   1
     NRAD    =         30 # (the default)
     NANG    =        131 # (the default)
     NPART   =          1 # (the default)
     RADIUS  = 0.00000000 # (the default)
     RSLATER =      FALSE # (the default)
     RPOPLE  =      FALSE # (the default)
     RIONIC  =      FALSE # (the default)
  /GRIDATOM_PH

The meaning of the keywords is the same as in the [[#GRIDATOM|namelist GRIDATOM]]

<br /><br />







===                  MACHINEPARAMETERS          ===

This namelists allows to control the vector length used when doing numerical calculations on grids. This parameter is critical for speed and memory requirements. The default setting is 2048 for the VPP and 128 otherwise. The other option are for debug purpose only.

 
  &MACHINEPARAMETERS
     MACHINEPARAMETERS_VECLEN     =      128 # (the default)
     MACHINEPARAMETERS_PH_VECLEN  =      128 # (the default)
     MACHINEPARAMETERS_DIMCHECK   =     TRUE # (the default)
     MACHINEPARAMETERS_CHECKPRECI = 1.00E-06 # (the default)
  /MACHINEPARAMETERS (namelist may be dropped)

; MACHalculations on grids
; MACHINEPARAMETERS_PH_VECLEN
: vector length used in the post hoc part. Default is to use MACHINEPARAMETERS_VECLEN. Memory requirements are especially high in the post hoc part if you are calculatin gradients. Thus it may be necessary to choose a smaller vector length.
; MACHINEPARAMETERS_DIMCHECK
: Perform certain dimension checks in SCF part.
; MACHINEPARAMETERS_CHECKPRECI
: Precision used to compare numbers when running in debug mode.

<br /><br />

===                  MAIN_OPTIONS          ===

Various important options.

 
  &MAIN_OPTIONS
     NUMERIC_EXCH        =      TRUE # (the default)
     SPIN_RESTRICTED     =      TRUE # (the default)
     RELATIVISTIC        =     FALSE # (the default)
     <span class="so">SPIN_ORBIT          =     FALSE # (the default) /* Version > 2.1g */</span>
     INTEGRALS_ON_FILE   =      TRUE # (the default)
     USE_MODEL_DENSITY   =     FALSE # (the default)
     ENERGIES_ALWAYS     =     FALSE # (the default)
     DIRECT_ENERGY_CALC  =     FALSE # (the default)
     PERTURBATION_THEORY =      TRUE # (the default)
     INTEGRAL_EXPMAX     = 5.000E+01 # (the default)
     # the remaining options are outdated but kept for compatibility
     SAVE_XCKS_MATRIX    =     FALSE # (the default)
     READ_XCKS_MATRIX    =     FALSE # (the default)
     SAVE_XCKS_NBR       =        10 # (the default)
     READ_DENSMAT        =     FALSE # (the default)
     MAX_GEO_ITERATION   =         1 # (the default)
  /MAIN_OPTIONS

; NUMERIC_EXCH
: The exchange potential will be calculated numerically on a grid. Otherwise fit functions are used.
; SPIN_RESTRICTED
: This is an closed shell calculation.
; <tt>RELATIVISTIC</tt>
: Apply scalar relativistics.
; <tt>SPIN_ORBIT</tt>
: Initaite spin-orbit run. See [#Spin_Orbit Spin-Orbit] section.
; INTEGRALS_ON_FILE
: Write Integrals to file. Keeping integrals in memory gives some speed up but is only possible for very small problems or if you have extraordinary huge memory. Default is to keep integrals in memory on VPP and write them to file on all other platforms.
; USE_MODEL_DENSITY
: Use model density. This option is not working up to now.
; ENERGIES_ALWAYS
: Calculate all contributions to energy separately, but pay the price of extra PVM communication and slower performance.
; DIRECT_ENERGY_CALC
: Apply a new algorithm that allows to calculate all contributions to energy separately without extra cost.
; PERTURBATION_THEORY
: Apply perturbation theory to speed up SCF convergence.
; INTEGRAL_EXPMAX
: Cut off criterion used to neglect the calculation of small integrals.
; SAVE_XCKS_MATRIX
: Outdated. Equivalent to SAVE_SCFSTATE in [[#RECOVER_OPTIONS|RECOVER_OPTIONS]].
; READ_XCKS_MATRIX
: Outdated. Equivalent to READ_SCFSTATE in [[#RECOVER_OPTIONS|RECOVER_OPTIONS]].
; SAVE_XCKS_NBR
: Outdated. Equivalent to SAVE_INTERVAL in [[#RECOVER_OPTIONS|RECOVER_OPTIONS]].
; READ_DENSMAT
: Outdated. Equivalent to READ_OLDLCGTO in [[#RECOVER_OPTIONS|RECOVER_OPTIONS]].
; MAX_GEO_ITERATION
: Outdated. Equivalent to MAX_GEO_ITERATION in [[#CONVERGENCE_LIST|CONVERGENCE_LIST]].

<br /><br />

===                  MDA_OPTIONS          ===

This namelist contains options to control model density approach calculations. (not yet working)

 
  &MDA_OPTIONS
     CONSTRAIN_RHOSPIN =      TRUE # (the default)
     RHO_EXACT         =     FALSE # (the default)
     RHO_SHAPE_EPS     = 1.000E-12 # (the default)
     ATOMIC_RADIUS     = 0.000E+00 # (the default)
  /MDA_OPTIONS (namelist may be dropped)

<br /><br />

===                  MIXING          ===

This namelist controls the mixing procedure used in the SCF cycles to promote convergence. In the first START_AFTER_CYCLE SCF-cycles a mixing with the fixed coefficients given here is used. After that, dynamic mixing is used, i.e. the coefficients are calculated.

 
  &MIXING
     CHMIX             = 0.3000 # (the default)
     SPMIX             = 0.3000 # (the default)
     XCMIX             = 0.3000 # (the default)
     START_AFTER_CYCLE =     10 # (the default)
     DISCARD_INIT      =  FALSE # (the default)
     SPIN_SEPARATE     =  FALSE # (the default)
     GLOBAL_MIXING     =  FALSE # (the default)
  /MIXING (namelist may be dropped

; CHMIX
: Start mixing coefficients for charge fit function coefficients.
; SPMIX
: Start mixing coefficients for spin.
; XCMIX
: Start mixing coefficients for exchange fit function coefficients
; START_AFTER_CYCLE
: start dynamic mixing after this SCF cycle. Setting a number bigger then [[#CONVERGENCE_LIST|MAX_ITERATION]] will switch off dynamic mixing.
; DISCARD_INIT
; SPIN_SEPARATE
; GLOBAL_MIXING
: use alternative new mixing algorithm.

<br /><br />

===                  OCCUPATION          ===

This namelist controls the reoccupation of orbitals during the SCF procedure

:: ''Information on how to specify fixed spin/magnetic moment you will find at [[Convergence]]-page. This description of the namelist appears to be outdated''

 
  &OCCUPATION
     CHARGE         =   0.000000 # (the default)
     MAGN_MOMENT    =   0.000000 # (the default)
     MIN_SPIN_DIFF  =  1.000E-03 # (the default)
     DIAG_OFFSET_EV =   1.000000 # (the default)
     FIXED          =      FALSE # (the default)
  /OCCUPATION (namelist may be dropped)

; CHARGE
: This switch can be used to assign a charge to the entire molecule. [au]
; MAGN_MOMENT
; MIN_SPIN_DIFF
; DIAG_OFFSET_EV
; FIXED

<br /><br />

===                  OPERATIONS          ===

This namelist is replaced by [[#TASKS|namelist TASKS]] and just kept for compatibility. Its use is no longer recommended.

Various combinations of operations are not allowed and will produce error messages when reading input.

The following debug switches kept for backward compatibility must be set to FALSE:

* OPERATIONS_DEBUG_ORBITALS
* OPERATIONS_DEBUG_GRID
* OPERATIONS_INTEGRALTEST
* OPERATIONS_QUADRUPEL_OB
* OPERATIONS_QUADRUPEL_FF

Default is to perform Single Point Calculation and Calculate Gradients.

 
  &OPERATIONS
     OPERATIONS_SYMM              =  TRUE # (the default)
     OPERATIONS_SCF               =  TRUE # (the default)
     OPERATIONS_INTEGRAL          =  TRUE # (the default)
     OPERATIONS_WRITE_INPUT       =  TRUE # (the default)
     OPERATIONS_WRITE_FULL_INPUT  = FALSE # (the default)
     OPERATIONS_WRITE_SHORT_INPUT = FALSE # (the default)
     OPERATIONS_WRITE_INPUT_SLAVE = FALSE # (the default)
     OPERATIONS_POST_HOC          =  TRUE # (the default)
     OPERATIONS_GRADIENTS         =  TRUE # (the default)
     OPERATIONS_GEO_OPT           = FALSE # (the default)
     OPERATIONS_MAKE_GX           = FALSE # (the default)
     OPERATIONS_READ_GX           = FALSE # (the default)
     OPERATIONS_DIPOLE            = FALSE # (the default)
     OPERATIONS_OLD_INPUT         = FALSE # (the default)
     OPERATIONS_GX_HIGHPREC       = FALSE # (the default)
     OPERATIONS_PROPERTIES        = FALSE # (the default)
     OPERATIONS_RESPONSE          = FALSE # (the default)
     OPERATIONS_DEBUG_ORBITALS    = FALSE # (the default)
     OPERATIONS_DEBUG_GRID        = FALSE # (the default)
     OPERATIONS_INTEGRALTEST      = FALSE # (the default)
     OPERATIONS_QUADRUPEL_OB      = FALSE # (the default)
     OPERATIONS_QUADRUPEL_FF      = FALSE # (the default)
  /OPERATIONS (namelist may be dropped)

<br /><br />

===                  ORBITAL_LIST          ===

Must directly follow namelist [[#ORBITAL_PLOT|ORBITAL_PLOT]] [[#ORBITAL_PLOT|N_INPUT_LINES]] times. Describes orbitals to be plotted.

 
  &ORBITAL_LIST
     IRREP = 1
     SPIN  = 1
     N_ORB = 5
     RANGE =.false.
     SPLIT_MODE = .false.
     N_SPLIT_ATOMS = 0
  /ORBITAL_LIST

; IRREP
: Irrep of the orbitals to be plotted.
; SPIN
: Spin of the orbitals to be plotted.
; N_ORB
: Total number of orbitals. The orbitals have to be enumerated in the line immedeately after this namelist. The number in this list refers to the number within the IRREP and SPIN.
; RANGE
: If set to true, in the next line not all orbitals have to be enumerated, but the lowest and the highest orbital of a coherent list of orbitals have to be given.
; SPLIT_MODE
: If set to true, the orbitals will be splitted into its atomic and angular components. This may be helpfull for a orbital analysis.
; N_SPLIT_ATOMS
: Only meaningfull, if SPLIT_MODE is set to true. To limit the amount of output, the N_SPLIT_ATOMS atoms, for which contributions to the orbitals should be plotted, can be enumerated in free integer format directly in the line after the list of orbitals.

If N_SPLIT_ATOMS is greater zero a line containg the N_SPLIT_ATOMS indices in free integer format must follow directly. The indices enumerate the atoms for which contributions to the orbitals should be plotted. <br /><br />

===                  ORBITAL_PLOT          ===

This is the central namelist for plotting orbitals and densities with the ParaGauss program. In order to activate these features the PROPERTIES part must be run and ORBITAL_PLOT must be set to true in the [[#PROPERTIES|namelist PROPERTIES]].

Orbitals or densities will be evaluated on a special two dimensional user defined grid. The data are written to the file plot.dat in the output directory. This file has to be passed to the [/home/ttfs/DOCUMENTATION/DOK/paraplot.dvi paraplot] program.

 
  &ORBITAL_PLOT
     N_INPUT_LINES   =          0 # (the default)
     DENSITY_PLOT    =      FALSE # (the default)
     SPIN_DIFFERENCE =      FALSE # (the default)
     STEP_X          =  1.000E-01 # (the default)
     STEP_Y          =  1.000E-01 # (the default)
     LENGTH_X        =  1.000E+01 # (the default)
     LENGTH_Y        =  1.000E+01 # (the default)
  /ORBITAL_PLOT

; N_INPUT_LINES
: Number of namelists ORBITAL_LIST, which will follow after this namelist, to define orbitals. If DENSITY_PLOT is set to false, then for every orbital a record will be written to plot.dat. This record can be extracted later on by paraplot. But be carefull: Plotting to much orbitals will result in a huge amount of output.
; DENSITY_PLOT
: If set to true, a density, defined by the orbitals specified in the namelists ORBITAL_LIST will be written to plot.dat. For the generation of the density the occupation numbers are taken into account.
; SPIN_DIFFERENCE
: This switch can be used to generate spin differences. If set to true, the spin up (spin=2) density will be multiplied by -1.
; STEP_X
: Distance (in au) between the gridpoints in direction1.
; STEP_Y
: Distance (in au) between the gridpoints in direction2.
; LENGTH_X
: Range of the grid (in au) between the gridpoints in direction 1.
; LENGTH_Y
: Range of the grid (in au) between the gridpoints in direction 2.

Immedeately after the namelist three lines, with 3 real numbers in each line, have to follow.

; First line
: Lower left corner of the 2D grid.
; Second line
: Unity vector pointing in the first direction of the grid.
; Third line
: Unity vector pointing in the second direction of the grid.

Now N_INPUT_LINES namelists [[#ORBITAL_LIST|ORBITAL_LIST]] are required to follow directly.

<br /><br />

===                  OUTPUT          ===

This namelist controls the overall amount of output written to file.

For normal calculations, it is highly recommended to use the default setting and drop the namelist.

The namelist may be followed by namelists OUTPUT_??? to set separate switches that control the output of various entities (see below).

 
  &OUTPUT
     OUTPUT_LEVEL =  1 # (the default)
     # legal values are: 0, 1, 5, 10
  /OUTPUT (namelist may be dropped)

; OUTPUT_LEVEL
: The higher the value, the more output.
:: Absolute minimum of output only.
;; 1
:: Output suitable for normal calculations
;; 5
:: Debug output still suitable for larger calculations
;; 10
:: Highest level of debug output only suitable for very small calculations: H2 ...

<br /><br />

===                  OUTPUT          ===

This namelist controls the overall amount of output written to file.

For normal calculations, it is highly recommended to use the default setting and drop the namelist.

The namelist may be followed by namelists OUTPUT_??? to set separate switches that control the output of various entities (see below).

 
  &OUTPUT
     OUTPUT_LEVEL =  1 # (the default)
     # legal values are: 0, 1, 5, 10
  /OUTPUT (namelist may be dropped)

; OUTPUT_LEVEL
: The higher the value, the more output.
:: Absolute minimum of output only.
;; 1
:: Output suitable for normal calculations
;; 5
:: Debug output still suitable for larger calculations
;; 10
:: Highest level of debug output only suitable for very small calculations: H2 ...

<br /><br />

===                  OUTPUT_CONFIG          ===

 
  &OUTPUT_CONFIG
     OUTPUT_PVMCONFIG  =  TRUE # (the default)
     OUTPUT_OPERATIONS =  TRUE # (the default)
  /OUTPUT_CONFIG (namelist may be dropped)

<br /><br />

===                  OUTPUT_DIPOLE          ===

This namelist controls amount of output of Dipole part.

Dipole calculation must be switched on in namelist [[#TASKS|TASKS]] or [[#OPERATIONS|OPERATIONS]].

 
  &OUTPUT_DIPOLE
     OUTPUT_DIPOLE_DETAILED       =  TRUE # (the default)
     OUTPUT_DIPOLE_TRANSITIONM_F  = FALSE # (the default)
     OUTPUT_DIPOLE_TRANSITIONM_UF = FALSE # (the default)
     OUTPUT_DIPOLE_SIMOL          = FALSE # (the default)
  /OUTPUT_DIPOLE (namelist may be dropped)

; OUTPUT_DIPOLE_DETAILED
: output of dipole moments of single orbitals
; OUTPUT_DIPOLE_TRANSITIONM_F
: formatted output of dipole transition moments. Dipole Transition moments are selected with. [[#DIPOLE_TRANSITIONMOMENTS|namelistDIPOLE_TRANSITIONMOMENTS]].
; OUTPUT_DIPOLE_TRANSITIONM_UF
: unformatted output of dipole transition moments in separate file suitable for response calculations.
; OUTPUT_DIPOLE_SIMOL
: output of total dipole moment in a.u. to file "dipmon.sav" used by simol for frequency calculations.

<br /><br />

===                  OUTPUT_INTEGRAL          ===

 
  &OUTPUT_INTEGRAL
     OUTPUT_INT_FITCONTRACT      = FALSE # (the default)
     OUTPUT_INT_2C_FIT           = FALSE # (the default)
     OUTPUT_INT_SOLHRULES        = FALSE # (the default)
     OUTPUT_INT_PARAMETERS       =  TRUE # (the default)
     OUTPUT_INT_PROGRESS         = FALSE # (the default)
     OUTPUT_INT_DETAILEDPROGRESS = FALSE # (the default)
     OUTPUT_INT_TASKDISTRIBUTION = FALSE # (the default)
     OUTPUT_INT_QUADRUPELSTORE   = FALSE # (the default)
     OUTPUT_INT_LOOPS            = FALSE # (the default)
     OUTPUT_INT_DEEPLOOPS        = FALSE # (the default)
     OUTPUT_INT_DATA             = FALSE # (the default)
  /OUTPUT_INTEGRAL (namelist may be dropped)

<br /><br />

===                  OUTPUT_IOUNITADMIN          ===

This namelists determines which files should be used for output. File "output" is always used.

 
  &OUTPUT_IOUNITADMIN
     IOUNITADMIN_USE_STDOUT =  TRUE # (the default)
     IOUNITADMIN_USE_DEBUG  = FALSE # (the default)
     IOUNITADMIN_USE_BUGGY  = FALSE # (the default)
  /OUTPUT_IOUNITADMIN

; IOUNITADMIN_USE_STDOUT
: output to standard output channel, i.e. screen or output file of queue system.
; IOUNITADMIN_USE_DEBUG
: output to file "debug_output".
; IOUNITADMIN_USE_BUGGY
: output to file "buggy_log". This file is well suited for finding the exact location of a program crash since it is always opened and closed.

<br /><br />

===                  OUTPUT_POST_HOC          ===

 
  &OUTPUT_POST_HOC
     OUTPUT_POST_HOC_MAIN = FALSE # (the default)
     OUTPUT_MAIN_GRADIENT = FALSE # (the default)
  /OUTPUT_POST_HOC (namelist may be dropped)

<br /><br />

===                  OUTPUT_SCF          ===

 
  &OUTPUT_SCF
     OUTPUT_SCFLOOPS       =  TRUE # (the default)
     OUTPUT_REOCCUP        = FALSE # (the default)
     OUTPUT_FERMI          =  TRUE # (the default)
     OUTPUT_CHARGEFIT      = FALSE # (the default)
     OUTPUT_CONDITION      =  TRUE # (the default)
     OUTPUT_HAMILTONIAN    = FALSE # (the default)
     OUTPUT_EIGENDATA      = FALSE # (the default)
     OUTPUT_EIGEN_STRATEGY = FALSE # (the default)
     OUTPUT_DENSMAT        = FALSE # (the default)
     OUTPUT_GRID           =  TRUE # (the default)
     OUTPUT_OCCLEVELS      = FALSE # (the default)
     OUTPUT_OVERLAP        = FALSE # (the default)
     OUTPUT_DATA_SAVED     = FALSE # (the default)
     OUTPUT_DATA_READ      = FALSE # (the default)
     OUTPUT_N_DENSITY_DEV  =     5 # (the default)
     OUTPUT_N_COEFF_DEV    =     5 # (the default)
  /OUTPUT_SCF (namelist may be dropped)

<br /><br />

===                  OUTPUT_SYM          ===

 
  &OUTPUT_SYM
     OUTPUT_SYMMETRY        =  TRUE # (the default)
     OUTPUT_NONSYMEQUIVVECS = FALSE # (the default)
  /OUTPUT_SYM (namelist may be dropped)

<br /><br />

===                  OUTPUT_TIMING          ===

 
  &OUTPUT_TIMING
     OUTPUT_TIMING_SUMMARY           =  TRUE # (the default)
     OUTPUT_TIMING_DETAILEDSUMMARY   = FALSE # (the default)
     OUTPUT_TIMING_INTEGRALS         =  TRUE # (the default)
     OUTPUT_TIMING_DETAILEDINTEGRALS = FALSE # (the default)
     OUTPUT_TIMING_SCFLOOPS          = FALSE # (the default)
     OUTPUT_TIMING_SCF               =  TRUE # (the default)
     OUTPUT_TIMING_DETAILEDSCF       = FALSE # (the default)
     OUTPUT_TIMING_POSTHOC           =  TRUE # (the default)
     OUTPUT_TIMING_DETAILEDPOSTHOC   = FALSE # (the default)
     OUTPUT_TIMING_SLAVES            = FALSE # (the default)
     OUTPUT_TIMING_INTERRUPTS        = FALSE # (the default)
  /OUTPUT_TIMING (namelist may be dropped)

<br /><br />

===                  OUTPUT_TRACE          ===

Debug trace information about progress of execution of various important subroutines.

Beware of setting OUTPUT_PVM_MSGTAGS to TRUE. This will produce a huge protocol of all PVM communications.

 
  &OUTPUT_TRACE
     OUTPUT_SLAVEOPERATIONS = FALSE # (the default)
     OUTPUT_MAIN_MASTER     = FALSE # (the default)
     OUTPUT_MAIN_SYMM       = FALSE # (the default)
     OUTPUT_MAIN_SCF        = FALSE # (the default)
     OUTPUT_READ_INPUT      = FALSE # (the default)
     OUTPUT_WRITE_INPUT     = FALSE # (the default)
     OUTPUT_PVM_MSGTAGS     = FALSE # (the default)
     OUTPUT_MAIN_DIPOLE     = FALSE # (the default)
     OUTPUT_EFIELD_CALC     = FALSE # (the default)
  /OUTPUT_TRACE (namelist may be dropped)

<br /><br />

===                  OUTPUT_UNIQUE_ATOMS          ===

 
  &OUTPUT_UNIQUE_ATOMS
     OUTPUT_ATOMS              =  TRUE # (the default)
     OUTPUT_SYMADAPT           = FALSE # (the default)
     OUTPUT_RENORM             = FALSE # (the default)
     OUTPUT_ORBITALPROJECTIONS = FALSE # (the default)
  /OUTPUT_UNIQUE_ATOMS (namelist may be dropped)

; OUTPUT_ATOMS
: Names and Coordinates of Atoms
; OUTPUT_SYMADAPT
: Symmetry adaptation coefficients. Beware: this is a lot of debug output.
; OUTPUT_RENORM
: Renormalization coefficients. Beware: this is a lot of debug output.
; OUTPUT_ORBITALPROJECTION
: Debug only: Information about projection of orbital indices to SCF Metaindex.

<br /><br />


===                  POINTCHARGE          ===

This namelists describes the type and position of one [#Unique_atoms unique point charge]. It must be directly preceded by [[#POINTCHARGE_NUMBER|namelists POINTCHARGE_NUMBER]] and appear [[#POINTCHARGE_NUMBER|POINTCHARGE_N ]] times. See chapter [#Describing_the_Geometry Describing the Geometry] for understanding the concept.

 
  &POINTCHARGE
     NAME            = "left"
     Z               = 1.000
     N_EQUAL_CHARGES = 1
  /POINTCHARGE # obligatory, there are no defaults
     0.0E0  0.0E0   0.0E0

; NAME
: arbitrary name for point charge. Must be quoted
; Z
: nuclear charge
; N_EQUAL_CHARGES
: number of [#Symmetry_equivalent_atoms symmetry equivalent charges]. This is cross-checked by the symmetry part.

This namelist must be directly followed by one line containing the cartesian coordinate of one charge in atomic units (free format). The coordinates of the other [#Symmetry_equivalent_atoms symmetry equivalent charges] are calculated automatically.

<br /><br />

===                  POINTCHARGE_NUMBER          ===

This namelists gives the number of [#Unique_atoms unique point charges] of the problem. It starts the description of the point charges involved. Point charges are centers that carry a nuclear charge but no orbital basis functions.

Do not confuse the number of unique point charges with the total number of point charges since there might be [#Symmetry_equivalent_atoms symmetry equivalent point charges].

 
  &POINTCHARGE_NUMBER
     POINTCHARGE_N = 0 # (the default)
  /POINTCHARGE_NUMBER  (namelist may be dropped)

This namelist must be directly be followed by POINTCHARGE_N [[#POINTCHARGE|namelists POINTCHARGE]].

<br /><br />

===                  POPCOLUM          ===

must appear N_COLUMNS times directly after [[#POPULATION|namelist POPULATION]].

 
  &POPCOLUM
      N_CONTRIB = 3
  /POPCOLUM
  1  2   3   1   4  0

In the next line a list of N_CONTRIB contributions in integer format is recommended. Every contribution consists of two numbers, the number of the atom and the angular momentum (s=0,p=1,d=2,...). Example:

 
  1  2   3   1   4  0

means, that the d population of atom 1, the p population of atom 3 and the s population of atom 4 will be summed up.

<br /><br />

===                  POPULATION          ===

This namelist controls the population analysis output.

 
  &POPULATION
     POPULATION_LEVEL =  2  # (the default)
     # allowed values are 0, 1, 2, 3
     N_COLUMNS =  0 # (the default)
     DOS_PLOT         = FALSE # (the default)
     IRREP            =  0 # (the default)
     SPIN             =  0 # (the default)
     OCCUPATION       = FALSE # (the default)
     EIG_MIN          = -1.000E+02 # (the default)
     EIG_MAX          =  1.000E+01 # (the default)
  /POPULATION  (namelist may be dropped)

; POPULATION_LEVEL
: Defines the amount of output.
; N_COLUMNS
: > 0: Start a user defined population analysis. For every N_COLUMNS column one additional namelist POPCOLUM must directly follow this namelist.
; DOS_PLOT
: If .true.: generate output, which subsequently can be used for generating density of state plots. The output will be written to file "dos.dat" in the output-directory and consists of at least two columns. The first column is the orbital energy in au. If N_COLUMNS > 0 the number of additional columns is N_COLUMNS; the columns will contain the degeneracy times the populations defined by POPCOLUMN times the occupation (if occupation=true). If N_COLUMNS = 0, one column follows that contains the degeneracy times the occupation (if occupation is true).
; IRREP
: number of irrep, for which state will be written to dos.dat.If =0, all irreps will be considered.
; SPIN
: number of spin, for which state will be written to dos.dat.If =0, all spins will be considered.
; OCCUPATION
: If .true., use occupation for generation of DOS.
; EIG_MIN
: Minimal eigenvalue (in eV), which will be considered in the DOS.
; EIG_MAX
: Maximal eigenvalue (see above).

<br /><br />

===                  PROPERTIES          ===

Main namelist for properties part. In order to do the properties, either OPERATIONS_PROPERTIES (see [[#OPERATIONS|namelist OPERATIONS]])must be set to true, or TASK must be set to "PROPERTIES"(see [[#TASKS|namelist TASKS]]). If you calculate properties without scf and integral part ( what will be the usual case and is exactly what happens, if you set TASK to "PROPERTIES"), the following requirements have to be fulfilled:

* READ_EIGENVEC=true in [[#RECOVER_OPTIONS|namelist RECOVER_OPTIONS]].
* The file saved_eigenvec.dat must be in the input directory. Attention: It must have been generated previously with the option SAVE_EIGENVEC_ALL=.true. in [[#RECOVER_OPTIONS|namelist RECOVER_OPTIONS]].

 
  &PROPERTIES
     MULLIKEN          =     FALSE # (the default)
     PLOT_ORBITALS     =     FALSE # (the default)
     FRAG_ORB_ANALYSIS =     FALSE # (the default)
     DIPOLE            =     FALSE # (the default)
  /PROPERTIES (namelist may be dropped)

; MULLIKEN
: If true, a Mulliken population analysis (seeformed.
; PLOT_ORBITALS
: If true, generate a interface file for plotting orbitals or densities (see [[#ORBITAL_PLOT|namelist ORBITAL_PLOT]]).
; FRAG_ORB_ANALYSIS
: If true, perform a fragment orbital analysis (see [[#FRAG_ORB_ANALYSIS|namelist FRAG_ORB_ANALYSIS]]).
; DIPOLE
: If true, calculate dipole moments and dipole transition moments (see namelist [[#DIPOLE_TRANSITIONMOMENTS|DIPOLE_TRANSITIONMOMENTS]]). This only works if TASK = "Response" was selected in [[#TASKS|namelist TASKS]]). Otherwise you can switch on dipole calculation in this namelist.

<br /><br />

===                  RECOVER_OPTIONS          ===

During SCF Iterations, it is possible to save and recover the state of the calculation at various points of the SCF loop. This Options are both useful for recovering crashed calculations and to save computing time by starting the SCF part with a good approximation of the orbitals when performing [#Geometry_Optimization geometry optimization].

The corresponding files are stored by the [#ttfs_script ttfs script] in compressed form (gzip) but are also accepted uncompressed for input.

When performing [#Geometry_Optimization geometry optimization], it is allowed to demand recovering even if the corresponding files do not yet exist. Otherwise, this will result in an error.

Mixing coefficients, energy and SCF cycle are always stored. If you want to recover but reset SCF cycle counting use switch RESET_SCFCYCLE.

It is recommended to use switches SAVE_SCFSTATE and READ_SCFSTATE for normal save and recover.

When using geometry optimization, the default for SAVE_SCFSTATE and READ_SCFSTATE and RESET_SCFCYCLE is switched to true.

 
  &RECOVER_OPTIONS
     SAVE_KSMATRIX      =     FALSE # (the default)
     READ_KSMATRIX      =     FALSE # (the default)
     SAVE_EIGENVEC      =     FALSE # (the default)
     SAVE_EIGENVEC_ALL  =     FALSE # (the default)
     SAVE_AS_FRAGMENT   =     FALSE # (the default)    
     READ_EIGENVEC      =     FALSE # (the default)
     SAVE_SCFSTATE      =     FALSE # (the default)
     READ_SCFSTATE      =     FALSE # (the default)
     SAVE_FITCOEFF      =     FALSE # (the default)
     READ_FITCOEFF      =     FALSE # (the default)
     SAVE_INTERVAL      =         0 # (the default)
     READ_OLDLCGTO      =     FALSE # (the default)
     RESET_SCFCYCLE     =     FALSE # (the default)
  /RECOVER_OPTIONS (namelist may be dropped)

; SAVE_KSMATRIX
: Store hamiltonian in file "saved_ksmatrix.dat"
; READ_KSMATRIX
: Recover hamiltonian from file "saved_ksmatrix.dat"
; SAVE_EIGENVEC
: Store eigenvectors (and occupation numbers,...) in file "saved_eigenvec.dat"
; SAVE_EIGENVEC_ALL
: Store not only the occupied and some of the lowest virtual orbitals, but all of them. This option must be used, if subsequently a PROPERTIES run should be performed.
; SAVE_AS_FRAGMENT
: A file saved_fragment.dat will be created in your output directory, which subsequently can be used for a fragment orbital analysis [([#FRAG_ORB_ANALYSIS|namelist FRAG_ORB_ANALYSIS]]).
; READ_EIGENVEC
: Recover eigenvectors from file "saved_eigenvec.dat"
; SAVE_SCFSTATE
: Store charge fit coefficients and exchange part of hamiltonian in file "saved_scfstate.dat"
; READ_SCFSTATE
: Recover charge fit coefficients and exchange part of hamiltonian from file "saved_scfstate.dat"
; SAVE_FITCOEFF
: Store fit coefficients in file "saved_fitcoeff.dat"
; READ_FITCOEFF
: Recover fit coefficients from file "saved_fitcoeff.dat"
; SAVE_INTERVAL
: Store every SAVE_INTERVAL SCF cycles. If 0 is chosen, store is only done at end of SCF cycles.
; READ_OLDLCGTO
: Outdated. Read in files "eigenvectors.dat" and "occ_num.dat" produced by old lcgto. These file may not be compressed. This is only done if integrals are taken from old lcgto as well.
; RESET_SCFCYCLE
: Reset SCF cycle counting when recovering.

<br /><br />

<div class="so">

===SPIN_ORBIT===

 
  &SPIN_ORBIT
     LEVEL = "none" # (the default)
  /SPIN_ORBIT

This namelist defines what type of SO calculations you really need. <br />Possible choices are (a nuclear field only)
; <tt>LEVEL="SpinOrbit,NoPVxP"</tt>
: Add this item only if you want to do an SR calculation in a very expensive way - this eliminates spin-orbit coupling due to nuclear field.
; <tt>LEVEL="SpinOrbit,Polarized"</tt>
: Add this clause to do a '''polarized spin-orbit''' calculation.
; <tt>LEVEL="SpinOrbit,EIS=LAPACK"</tt>
: add this if you want <tt>LAPACK</tt> eigensolver to be used instead of <tt>EISPACK</tt>. <br />''<tt>EISPACK</tt> does not have a procedure for generalized eigenvalue problem and additionla required step is necessary - orthogonalization of overlap matrix. That is done by '''additional''' diagonalization. Ok, here I wanted to say that <tt>LAPACK</tt> is simply faster :-).''
; <tt>LEVEL="SpinOrbit,BackTrafo,FitTrafo:DKH(1)"</tt>
: for spin-orbit with first order DK transformation of the coulomb term.
; <tt>LEVEL="SpinOrbit,BackTrafo,FitTrafo:hDKH(2)"</tt> or <tt>LEVEL="SpinOrbit,BackTrafo,FitTrafo:oDKH(2)"</tt>
: for second order DK transformation of the coulomb term. <tt>hDKH(2)</tt> and <tt>oDKH(2)</tt> are two flavors of the <tt>DKH(2)</tt> transformation. <tt>"o"</tt> stays for ''operator'', <tt>"h"</tt> stays for ''hamiltonian''. Short hand notation <tt>FitTrafo:DKH(2)</tt> is defaulted to <tt>oDKH(2)</tt>.

Refer to [#Spin_Orbit Spin Orbit] section for more information on spin-orbit.

</div>

===                  SYMMETRY_DATA          ===

Outdated. This namelist may only be used if new symmetry part is not used (See [[#OPERATIONS|namelist OPERATIONS]]). Otherwise use [[#SYMMETRY_GROUP|namelist SYMMETRY_GROUP]]. It describes the symmetry of the problem.

 
  &SYMMETRY_DATA
     POINT_GROUP = "C1" # (the default)
     N_IRREP     = 1    # (no default)
  /SYMMETRY_DATA

; POINT_GROUP
: Point Group of molecule calculated. Must be quoted. For legal values see [[#SYMMETRY_GROUP|namelist SYMMETRY_GROUP]].
; N_IRREP
: number of irreducible representations.

This namelist must be directly followed by N_IRREP [[#IRREP|namelists IRREP]].

<br /><br />

===                  SYMMETRY_GROUP          ===

This namelist determines the symmetry of the problem, i.e. the point group of molecule calculated.

Using higher symmetry drastically reduces computational effort and helps in case of SCF convergence problems due to an over-complete basis set. The symmetry is also used to create symmetry equivalent atoms from only one specified atom of that type.

For each point group, certain conventions exist concerning the direction and location of symmetry elements (See [#Describing_the_Geometry Geometry equivalent atoms]).

This namelist may only be used if new symmetry part is used (See [[#OPERATIONS|namelist OPERATIONS]]). Otherwise use [[#SYMMETRY_DATA|namelist SYMMETRY_DATA]].

 
  &SYMMETRY_GROUP
     POINT_GROUP = "C1" # (the default)
  /SYMMETRY_GROUP (namelist may be dropped)

; POINT_GROUP
: Point Group of molecule calculated. Must be quoted. Legal values are:
;; "C1"
:: no symmetry
;; "CS"
:: one plane of symmetry
;; "Ci"
:: one center of symmetry
;; "C2" "C3" ... "C10"
:: n-fold rotation axis
;; "C2H" "C3H" ... "C10H"
:: n-fold rotation axis plus a horizontal plane of symmetry
;; "C2V" "C3V" ... "C10V"
:: n-fold rotation axis plus n vertical planes of symmetry
;; "Dinh"
;; "D2" "D3" ... "D10"
:: n-fold rotation axis plus n perpendicular twofold axes
;; "D2H" "D3H" ... "D10H"
:: n-fold rotation axis plus n perpendicular twofold axes in a horizontal plane of symmetry
;; "D2D" "D3D" ... "D8D"
:: n-fold rotation axis plus n perpendicular twofold axes plus n vertical planes of symmetry
;; "S4" "S6" ... "S20"
:: n-fold rotation reflection axis
;; "T"
;; "TH"
;; "TD"
;; "O"
;; "OH"
;; "I"
;; "IH"

<br /><br />

===                  TASKS          ===

Either this namelist or the outdated [[#OPERATIONS|namelist OPERATIONS]] is required as first namelist.

It determines which tasks should be performed by ParaGaus.

 
  &TASKS
     TASK              = "SinglePoint" # (obligatory, no default)
     # Allowed values are:
     # SinglePoint GeoOpt Gradients # Allowed values are: default full short none
     DIPOLE            =  FALSE     # (the default)
     GX_HIGHPREC       =  FALSE     # (the default)
     WRITE_INPUT_SLAVE =  FALSE     # (the default)
     READ_GX           =  FALSE     # (the default)
  /TASKS

; TASK
: The task to be performed. Values must be included in quotes. Allowed values are:
;; "SinglePoint"
:: Perform Single Point Calculation
;; "GeoOpt"
:: Run Geometry Optimization
;; "Gradients"
:: Calculate Gradients, but do not run geometry optimizer
;; "CheckInput"
:: Read input and run symmetry part to check consistency of input
;; "MakeGX"
:: Read input and run symmetry part to produce an input [#gx_file gx file] for geometry optimizer. This file still requires additional editing.
;; "Properties"
:: Do a special properties run. Only a very short integral part will be performed (to calculate the overlap matrix). The properties are controlled by [[#PROPERTIES|namelist PROPERTIES]].
;; "Response"
:: Start Response calculation
; ECHO_INPUT_LEVEL
: Amount of information written to file input.out. Values must be included in quotes. Allowed values are:
;; "default"
:: Show all settings, and indicate if they are identical to the default
;; "full"
:: Show all settings
;; "short"
:: Show only settings that differ from the defaults
;; "none"
:: Do not produce file input.out
; DIPOLE
: Calculate Dipole Moments. Output is controlled by namelists [[#DIPOLE_TRANSITIONMOMENTS|DIPOLE_TRANSITIONMOMENTS]] and [[#OUTPUT_DIPOLE|OUTPUT_DIPOLE]]. Calculating Dipols Is possible for tasks "SinglePoint", "GeoOpt", and "Gradients". For task task "Properties" dipol calculation is not activated here but in [[#PROPERTIES|namelist PROPERTIES]].
; GX_HIGHPREC
: Write a high precision version of [#gx_file gx file]. This requires a special version of [#simol_program simol program] to be given as argument to [#ttfs_script ttfs script]
; WRITE_INPUT_SLAVE
: Make slaves write file input.out for debug purpose as well. This requires flag -keep_slave_output of [#ttfs_script ttfs script]
; READ_GX
: Read in atomic coordinates from [#gx_file gx file] without performing geometry optimization.

<br /><br />

===                  UNIQUE_ATOM          ===

This obligatory namelists describes of the type and position of one [#Unique_atoms unique atom]. It must be directly preceded by [[#UNIQUE_ATOM_NUMBER|namelists UNIQUE_ATOM_NUMBER]] and appear [[#UNIQUE_ATOM_NUMBER|N_UNIQUE_ATOMS]] times. See chapter [#Describing_the_Geometry Describing the Geometry] for understanding the concept.

 
  &UNIQUE_ATOM
     NAME          = "C"
     Z             = 6.000
     N_EQUAL_ATOMS = 1
  /UNIQUE_ATOM # obligatory, there are no defaults
     0.0E0  0.0E0   0.0E0

; NAME
: arbitrary name for atom. Must be quoted
; Z
: nuclear charge
; N_EQUAL_ATOMS
: number of [#Symmetry_equivalent_atoms symmetry equivalent atoms]. This is cross-checked by the symmetry part.

This namelist must be directly followed by one line containing the cartesian coordinate of one atom in atomic units (free format). The coordinates of the other [#Symmetry_equivalent_atoms symmetry equivalent atoms] are calculated automatically. In the outdated case that the new symmetry part is not used (See [[#OPERATIONS|namelist OPERATIONS]]), the namelist must be followed by N_EQUAL_ATOMS lines with the cartesian coordinate of all equal atoms in atomic units instead.

In case of a [#Geometry_Optimization geometry optimization] the coordinates given here are ignored and the coordinates are taken from the [#gx_file gx_file] instead.

<br /><br />

===                  UNIQUE_ATOM_BASIS          ===

This namelist is part of the orbital or charge or exchange fit function basis set specification of one unique atom. It describes the basis functions of one angular momentum or, in case of fitfunctions, also the r<sup>2</sup>- type basis.

The namelist may only appear within the basis set specification block started with [[#UNIQUE_ATOM_BASISSET|namelist UNIQUE_ATOM_BASISSET]]. The syntax of this block is described there.

 
  &UNIQUE_ATOM_BASIS
     N_EXPONENTS         =    5
     N_UNCONTRACTED_FCTS =    0 # (the default)
     N_CONTRACTED_FCTS   =    3
  /UNIQUE_ATOM_BASIS
   # Exponents
     2.000000000000000E-01    5.000000000000000E-01    1.250000000000000E+00  %
     3.125000000000000E+00    7.812500000000000E+00
   # Contraction   1
     1.000000000000000E+00    5.000000000000000E-01    2.000000000000000E-01  %
     1.000000000000000E-01    5.000000000000000E-02
   # Contraction   2
     1.000000000000000E-01    5.000000000000000E-01    1.000000000000000E+00  %
     5.000000000000000E-01    1.000000000000000E-01
   # Contraction   3
     5.000000000000000E-02    1.000000000000000E-01    2.000000000000000E-01  %
     5.000000000000000E-01    1.000000000000000E+00

; N_EXPONENTS
: Total number of exponents of primitive basis functions of the particular angular momentum and type (orbital, charge fit basis, exchange fit basis).
; N_UNCONTRACTED_FCTS
: Number of those exponents used without being contracted. The first N_UNCONTRACTED_FCTS exponents will be used.
; N_CONTRACTED_FCTS
: Number of contracted basis functions of the particular angular momentum and type (orbital, charge fit basis, exchange fit basis). In the case of charge and exchange fit functions so called [[#UNIQUE_ATOM_GLOB_CON|"global contractions"]] exist as well. However, if global contractions are used for one unique atom (i.e. [[#UNIQUE_ATOM_GLOB_CON|N_GLOB_CONS_CH / N_GLOB_CONS_XC]] is not zero) the use of the "local contractions" described here is forbidden (.i.e. N_CONTRACTED_FCTS must be zero).

The namelist must directly followed by:

* one line containing N_EXPONENTS exponents for the gauss functions of the primitive basis.
* N_CONTRACTED_FCTS lines containing N_EXPONENTS contraction coefficients. Each line describes how one contracted basis function is build as a linear combination of primitive basis functions with the given coefficients.

In the example above, [#Continuation_Line continuation lines] were used. The [#Number_Format number format] is quite free.

<br /><br />

===                  UNIQUE_ATOM_BASISSET          ===

This namelist starts the specification of the orbital and fit function basis sets of one unique atom. The basis for orbitals and charge and exchange fitfunction are independent of each other but are all specified here. It is obligatory to specify the basis sets for all unique atoms.

The basis specification block may only appear after the number of unique atoms N_UNIQUE_ATOMS was specified in [[#UNIQUE_ATOM_NUMBER|namelists UNIQUE_ATOM_NUMBER]]. N_UNIQUE_ATOMS blocks starting with namelist UNIQUE_ATOM_BASISSET must appear in direct consecution.

It is recommended to use one [#Include_File include file] for the basis set block of each unique atom. The locations of basis set libraries on our platforms are:

* HPs: /users/hp4/ttfs/bases
* Power Challenge: /home/ttfs/bases
* SP2: /afs/lrz-muenchen.de/home/t/t3831ac/t3831ak/bases
* VPP: /home/t/t3831ak/bases

 
  &UNIQUE_ATOM_BASISSET
     LMAX_OB        =   2
     LMAX_CH        =   2
     LMAX_XC        =   2
     N_GLOB_CONS_CH =   0 # (the default)
     N_GLOB_CONS_XC =   0 # (the default)
  /UNIQUE_ATOM_BASISSET

; LMAX_OB
: The maximal angular momentum of orbital basis.
; LMAX_CH
: The maximal angular momentum of charge fit basis.
; LMAX_XC
: The maximal angular momentum of exchange fit basis.
; N_GLOB_CONS_CH
: The number of global contractions of charge fit basis.
; N_GLOB_CONS_XC
: The number of global contractions of exchange fit basis.

The basis set for each unique atom is specified in one block consisting of one namelist UNIQUE_ATOM_BASISSET followed in this order by:

* (LMAX_OB + 1) [[#UNIQUE_ATOM_BASIS|namelists UNIQUE_ATOM_BASIS]] for the orbital basis for l=0,1,...
* (LMAX_CH + 2) [[#UNIQUE_ATOM_BASIS|namelists UNIQUE_ATOM_BASIS]] for the charge fitfunction basis. The first namelist specifies the r<sup>2</sup> basis and the following ones the basis for l=0,1,... .
* (LMAX_XC + 2) [[#UNIQUE_ATOM_BASIS|namelists UNIQUE_ATOM_BASIS]] for the exchange fitfunction basis. The first namelist specifies the r<sup>2</sup> basis and the following ones the basis for l=0,1,... . The exchange fit function basis is read in even if it is not used because the exchange potential is calculated numerically.
* N_GLOB_CONS_CH [[#UNIQUE_ATOM_GLOB_CON|namelists UNIQUE_ATOM_GLOB_CON]] namelists describing the global contractions of the charge fitfunctions.
* N_GLOB_CONS_XC [[#UNIQUE_ATOM_GLOB_CON|namelists UNIQUE_ATOM_GLOB_CON]] namelists describing the global contractions of the exchange fitfunctions.

Each of the namelists [[#UNIQUE_ATOM_BASIS|UNIQUE_ATOM_BASIS]] and [[#UNIQUE_ATOM_GLOB_CON|UNIQUE_ATOM_GLOB_CON]] is directly followed by lines containing coefficients as described with these namelists.

<br /><br />

===                  UNIQUE_ATOM_GLOB_CON          ===

This namelist is part of the charge or exchange fit function basis set specification of one unique atom. It describes one global contraction of either charge or exchange fitfunctions of one unique atom.

Global contractions are linear combinations of primitive basis functions of several different angular momenta. In the normal case you want linear combinations within one angular moment only, it is recommended to use local contractions described in [[#UNIQUE_ATOM_BASIS|namelist UNIQUE_ATOM_BASIS]] instead for the sake of better performance and clarity. Within one unique atom, it is not allowed to mix local and global contractions of either charge or exchange fitfunctions.

The namelist may only appear within the basis set specification block started with [[#UNIQUE_ATOM_BASISSET|namelist UNIQUE_ATOM_BASISSET]]. The syntax of this block is described there.

 
  &UNIQUE_ATOM_GLOB_CON
     N_CONTRIBUTING_FCTS = 2
  /UNIQUE_ATOM_GLOB_CON
  # l  if  exp  coef
    1  1   1    0.5E0
    1  1   2    0.5E0

; N_CONTRIBUTING_FCTS
: number of primitive basis functions contributing to the contraction

The namelist must directly be followed by N_CONTRIBUTING_FCTS lines each describing one contributing primitive basis function. Each line must contain the following in this order:

* Index of angular momentum. Note that -1 means l=0, 0 means r<sup>2</sup>-function
* Index of independent function of same IRREP, partner and angular momentum
* Index of exponents contributing. This refers to exponents in corresponding [[#UNIQUE_ATOM_BASIS|namelist UNIQUE_ATOM_BASIS]].
* Coefficient to weight this primitive function with in the summation.

<br /><br />

===                  UNIQUE_ATOM_INDP_FCT          ===

This outdated namelist is part of the description of the symmetry adaption coefficients that is only necessary in case no symmetry part is run (See [[#OPERATIONS|namelist OPERATIONS]]).

It specifies the number N_FCTS of independent functions of the same IRREP, unique atom, angular momentum and exponent / contraction.

The symmetry adaption coefficients block may only appear after the number of unique atoms N_UNIQUE_ATOMS was specified in [[#UNIQUE_ATOM_NUMBER|namelist UNIQUE_ATOM_NUMBER]] and the basis set (See [[#UNIQUE_ATOM_BASISSET|namelists UNIQUE_ATOM_BASISSET]]), the symmetry group and Irreps (See [[#SYMMETRY_DATA|namelist SYMMETRY_DATA]]) are known.

This namelist is read in in a 3-fold loop running is the following order over:

* All [[#UNIQUE_ATOM_NUMBER|N_UNIQUE_ATOMS]] unique atoms.
* All [[#SYMMETRY_DATA|N_IRREP]] Irreps.
* All [[#UNIQUE_ATOM_BASISSET|Max(LMAX_OB,LMAX_CH,LMAX_XC)]] angular momenta of the given unique atom.

Each namelist UNIQUE_ATOM_INDP_FCT must directly be followed by N_FCTS [[#UNIQUE_ATOM_SYMADAPT|namelists UNIQUE_ATOM_SYMADAPT]]. All the symmetry adaption description must be written together in one block.

 
  &UNIQUE_ATOM_INDP_FCT
     N_FCTS = 2
  /UNIQUE_ATOM_INDP_FCT

<br />

In case the integrals are not calculated (See [[#OPERATIONS|namelist OPERATIONS]]), a section describing the renormalization coefficients for the orbital and fit function basis directly follows:

Lines of coefficients are read in in a 4-fold loop running is the following order over:

* All [[#UNIQUE_ATOM_NUMBER|N_UNIQUE_ATOMS]] unique atoms.
* The type of basis: first orbitals, then charge fitfunctions and finally exchange fitfunctions.
* The angular momenta up to [[#UNIQUE_ATOM_BASISSET|LMAX_OB / LMAX_CH / LMAX_XC]]. In case of fitfunctions the order is as follows: l=0, r<sup>2</sup>, l=1, ...
* All [[#SYMMETRY_DATA|N_IRREP]] Irreps.

Within this loop, two lines are read in if the number of floats contained is greater zero:

* The first line contains [[#UNIQUE_ATOM_BASIS|N_EXPONENTS]] coefficients in case global contractions are used (i.e. [[#UNIQUE_ATOM_BASISSET|N_GLOB_CONS_??]] greater zero) and [[#UNIQUE_ATOM_BASIS|N_UNCONTRACTED_FCTS]] coefficients otherwise. These are renormalization coefficients for uncontracted basis functions.
* The second line contains [[#UNIQUE_ATOM_BASIS|N_CONTRACTED_FCTS]] coefficients for the (locally) contracted basis functions.

<br /><br />

===                  UNIQUE_ATOM_NUMBER          ===

This obligatory namelists gives the number of [#Unique_atoms unique atoms] of the problem. It starts the description of the type and position of the atoms involved. See chapter [#Describing_the_Geometry Describing the Geometry] for understanding the concept.

Do not confuse the number of unique atoms with the total number of atoms since there might be [#Symmetry_equivalent_atoms symmetry equivalent atoms].

 
  &UNIQUE_ATOM_NUMBER
     N_UNIQUE_ATOMS = 2 # (no default)
  /UNIQUE_ATOM_NUMBER # this namelist is obligatory

This namelist must be directly be followed by N_UNIQUE_ATOMS [[#UNIQUE_ATOM|namelists UNIQUE_ATOM]].

<br /><br />

===                  UNIQUE_ATOM_SYMADAPT          ===

This outdated namelist is part of the description of the symmetry adaption coefficients that is only necessary in case no symmetry part is run (See [[#OPERATIONS|namelist OPERATIONS]]). The syntax of this block is described in [[#UNIQUE_ATOM_INDP_FCT|namelists UNIQUE_ATOM_INDP_FCT]].

It describes how the symmetry adapted basis functions of one particular IRREP, unique atom, angular momentum and [[#UNIQUE_ATOM_INDP_FCT|independent function]] is constructed.

This namelist must be directly preceded by [[#UNIQUE_ATOM_INDP_FCT|namelists UNIQUE_ATOM_INDP_FCT]] and appear the number [[#UNIQUE_ATOM_INDP_FCT|N_FCTS]] of independent function times in direct consecution.

 
  &UNIQUE_ATOM_SYMADAPT
     N_FCTS = 2
  /UNIQUE_ATOM_SYMADAPT
  # equal_atom, m, coef
     1          1   0.5
     2          1   0.5

This namelist must be directly followed by N_FCTS lines each describing one contributing summand by the following numbers in this order:

* Index of equal atom
* magnetical quantum number
* coefficient

<br /><br />

===                  XC_CONTROL          ===

==== XC Keyword ====
The XC keyword is a fast and simple way to specify the desired selection of the XC density functional.
  &XC_CONTROL
    XC = "VWN"
  /XC_CONTROL

Allowed values are
{| border=1 
 |+ Avalailable XC options
 ! width="90px" align="center"| XC =
 ! width="75px" align="center"| Type
 ! width="360px" align="center"| Description
 ! width="190px" align="center"| Literature
 |----
|| "XALPHA"      || LDA ||
|-
|| "VWN"         || LDA ||
|-
|| "PWLDA"       || LDA ||
|-
|| "RVWN"        || LDA, rel. ||
|-
|| "RVWN_ENGEL"  || LDA, rel. ||
|-
|| "LB94"        || LDA? ||
|-
|| "BP"          || GGA ||
|-
|| "BLYP"        || GGA ||
|-
|| "B88"         || GGA ||
|-
|| "RBP"         || GGA, rel. ||
|-
|| "BPW91"       || GGA ||
|-
|| "PW91"        || GGA ||
|-
|| "PW91c"       || GGA ||
|-
|| "PW91x"       || GGA ||
|-
|| "RPW91x"      || GGA, rel. ||
|-
|| "RPW91c"      || GGA, rel. ||
|-
|| "RPW91"       || GGA, GGA ||
|-
|| "ECMV92"      || GGA ||
|-
|| "PBE"         || GGA ||
|-
|| "PBEx"        || GGA ||
|-
|| "PBEN"        || GGA ||
|-
|| "revPBE"      || GGA ||
|-
|| "revPBEx"     || GGA ||
|-
|| "PBEsol"      || GGA ||
|-
|| "HCTHv4"      || GGA ||
|-
|| "HCTHv3"      || GGA ||
|-
|| "HCTHv2"      || GGA ||
|-
|| "HCTHv1"      || GGA ||
|-
|| "HCTHx"       || GGA ||
|-
|| "HCTHc"       || GGA ||
|-
|| "VMT"         || GGA ||
|-
|| "VT84"        || GGA ||
|-
|| "VMTsol"      || GGA ||
|-
|| "VT84sol"     || GGA ||
|-
|| "TPSS"        || MGGA ||
|-
|| "revTPSS"     || MGGA || currently deactivated
|-
|| "M06L"        || MGGA ||
|-
|| "VS98"        || MGGA ||
|-
|| "HartreeFock" || WFT || currently deactivated
|-
|| "B3LYP"       || HGGA || currently deactivated
|-
|| "PBE0"       || HGGA ||
|-
|| "TPSSh"       || HMGGA ||
|-
|| "M06"       || HMGGA ||
|-
|| "EXX"       || WFT || pure exact exchange
 |-
 |}


NB: will raise errors if no XC functional is found. To disable XC contributions set XC = "none".


==== User defined combinations ====
Since V3.1.9 ParaGauss offers also the possibility for user defined linear combinations of different XC contributions. This is done via the XC keyword by specifying XC = "contribution1:weight1 contribution2:weight2 ...".
For example the above TPSSh functional where 10% of the TPSS exchange contribution are substituted by 10% of exact exchange may also be defined as:

  &XC_CONTROL
    XC = "TPSSX:0.9 EXX:0.1 TPSSC:1.0"
  /XC_CONTROL

NB: as of ParaGauss V3.2.0 only the following contributions have been ported to user defined combinations: PBEX, PBEC, PBEN, PBENx, PBENC, TPSSx, TPSSc, EXX

==== Explicit Flags (Deprecated) ====
<span style="color:#FF0000;"> Namelist entries flagged for deletion. Dont use them any more! </span>

Selects the exchange correlation functional used in the SCF part. If not specified otherwise (see [[ParaGauss_User_Manual#PHXC_CONTROL_.28Deprecated.29 | namelist PHXC_CONTROL]]) the same potential is also used for the post hoc part.

Note the philosophy of the namelist: To permit a maximum flexibility in the choice of the functionals, there are no predefined combinations of exchange correlation functionals. The user is responsible for the selection of a meaningfull combination. For example, to perform a "VWN" calculation VWN and XALPHA must be set to true, as VWN only contains the correlation and does not include the LDA exchange. If you want to use a GGA correction, also the LDA functionals have to be selected.
 
  &XC_CONTROL
     XC             = "undef" # (the default)</span>
     XALPHA         =  TRUE # (the default)
     VWN            =  TRUE # (the default)
     PWLDAc         = FALSE # (the default) /* version >= V20_delta */
     PERDEW         = FALSE # (the default)
     BECKE88        = FALSE # (the default)
     PERDEWWANG91C  = FALSE # (the default)
     PERDEWWANG91X  = FALSE # (the default)
     BAERENDS94     = FALSE # (the default)
     PBEx           = FALSE # (the default) /* version >= V20_delta */
     PBEc           = FALSE # (the default) /* version >= V20_delta */
     revPBEx        = FALSE # (the default) /* version >= V20_delta */
     PBENx          = FALSE # (the default) /* version >= V20_delta */
     revPW91c       = FALSE # (the default) /* version >= V20_delta */
  /XC_CONTROL

; XALPHA
: Usual LDA exchange. (Xalpha with alpha=2/3).
; VWN
: LDA correlation functional from Vosko, Wilk and Nussair. (Can. J. Phys. 58,1200(1980)).
; PWLDAc
: Another parameterization of LSD correlation. Very similar to the VWN. <br /> Is a base for PW91 and PBE correlation functionals. <br /> (J. P. Perdew and Y. Wang, Phys. R ev. B '''45''', 13244 (1992)).
; PERDEW
: GGA correlation functional (Phys. Rev. B 34 7046 (1986)).
; BECKE88
: GGA exchange functional (Phys. Rev. A 38 3098 1988). <br />Normally PERDEW and BECKE88 are used together as a choice of a GGA Potential.
; PERDEWWANG91C, revPW91c
: GGA correlation functional. When revPW91c is also set additional 'zeta' term is used (PW91 IIA). <br /> (Phys. Rev. B 46,6671(1992)).
; PERDEWWANG91X
: GGA exchange functional (Phys. Rev. B 46,6671(1992)).<br />Normally PERDEWWANG91C and PERDEWWANG91C are used together as a choice of a GGA Potential.
; BAERENDS94
: GGA exchange potiential (Phys. Rev. A 49 (2421) 1994). Note: There is no energy expression to this functional. Thus it can not be used in the Post Hoc part. This functional is supposed to improve the energetic position of the Kohn-Sham eigenvalues.
; PBEx, PBEc
: Gradient corrections to the exchange and correlation functionals due to Perdew, Burke and Ernzerhof. <br /> Correlation can be used with an alternative exchange, see below. <br /> (J. P. Perdew, K. Burke, and M. Ernzerhof, Phys. Reon to the exchange functional due to Zhang and Yang. <br /> Revision of PBEx. To be used with PBEc. <br /> (Y. Zhang and W. Yang, Phys. Rev. Lett. '''80''', 890 (1998)).
; PBENx
: Gradient correction to the exchange functional due to Hammer, Hansen and Nørskov. <br /> To be used with PBEc. <br /> (B. Hammer, L. B. Hansen, and J. K. Nørskov, Phys. Rev. B. '''46''', 7413 (1999)).
; <tt>XC</tt>
: This is an alternative way of defining XC functional. Use it only if you know what you are doing. All other switches will be ignored - so there is no need to specify them: <br /><tt>&XC_CONTROL</tt><br /><tt> XC="vwn"</tt><br /><tt>/XC_CONTROL</tt><br /> Could be an example. Possible choices are (always with quotes!):
;; <tt>XC="undef"</tt> or skipped at all
:: you select the old-fashioned input
;; <tt>XC="VWN"</tt> or <tt>BP</tt>, <tt>PW91</tt>, <tt>PBE</tt>, <tt>PBEN</tt>, <tt>revPBE</tt>
:: are self-explanatory and are really what they say
;; <tt>XC="PWLDA"</tt> or <tt>PW-LDA</tt>, <tt>PWLSD</tt>, <tt>PW-LSD</tt>
:: all stay for same local exchange-correlation functional due to Perdew and Wang (see above).
;; <tt>XC="off"</tt>
:: turns XC off, use with care
;; <tt>XC="VWN,spatial"</tt> and like
:: is usefull for spin-orbit and says to evaluate XC in orbital (as opposed to spinor) space which must be much faster.
;; <tt>XC="VWN,spatial,orb->sporb"</tt> and like
:: use spatial orbitals to compute spinors as opposed to independent evaluation of both.  Note that all keys are '''case insensitive'''. This switch is mainly used together with [#Spin_Orbit spin-orbit].

<br /><br /><br /><br />

----

<br /><br />

=== Deprecated Namelists ===
Namelists that are not present in current versions or that are going to be deleted soon

====                  PVMOPTIONS (Deleted)         ====

<span style="color:#FF0000;"> Namelist DELETED in current versions. Raises error if still in use! </span>

This namelist controls parallel execution of program.

 
  &PVMOPTIONS
     N_PROCS                  =      1 # This setting is always required
     MASTER_WORK              =   TRUE # (the default)
     PVM_TIMEOUT              =    900 # (the default)
     PVM_TIMESTEP             =     10 # (the default)
     CATCH_SLAVEOUT           =  FALSE # (the default)
     PVM_MASTER_INTERRUPT_NBR =      1 # (the default)
     PVM_SLAVE_INTERRUPT_NBR  =      5 # (the default)
  /PVMOPTIONS

; N_PROCS
: Number of processors used. Take care to set the same number for the queue system.
; MASTER_WORK
: Master should handle a part of the fitfunction integrals.
; PVM_TIMEOUT
: [sec] If a host is idle and does not receive any messages for longer period, it will stop the calculation.
; PVM_TIMESTEP
: [sec] When trying to receive, check if all host are alive all PVM_TIMESTEP seconds.
; CATCH_SLAVEOUT
: Redirect output of slaves to standard output, i.e. screen or queue system output file. Does not work on all platforms.
; PVM_MASTER_INTERRUPT_NBR
: A performance parameter to the integral part. The master will really execute the interrupt function during calculation each PVM_MASTER_INTERRUPT_NBR time it is called.
; PVM_SLAVE_INTERRUPT_NBR
: A performance parameter to the integral part. The slave will really execute the interrupt function during calculation each PVM_SLAVE_INTERRUPT_NBR time it is called.

<br /><br />

====                  PHXC_CONTROL (Deprecated)         ====

<span style="color:#FF0000;"> Namelist FLAGGED FOR DELETION in a future version. dont use it any more!</span>

Since version 3.1.5 entries are ignored and the all possible functionals calculated.
Exceptions are MGGAs when a spin-orbit calculation is performed and hybrids when no exact exchange energy is available.


Selects the exchange correlation potential used in the Post Hoc part.
Default is to copy the settings from SCF part (see [[#XC_CONTROL|namelist XC_CONTROL]]).
 
  &PHXC_CONTROL
     <span class="so[">[#PHXC_CONTRO|-XC XC]] = "undef"</span>
     XALPHA_PH      =  TRUE # (the default)
     VWN_PH         =  TRUE # (the default)
     PWLDAc_PH      = FALSE # (the defa  = FALSE # (the default)
     BECKE88_PH     = FALSE # (the default)
     PERDEWWANG91C  = FALSE # (the default)
     PERDEWWANG91X  = FALSE # (the default)
     PBEx_PH        = FALSE # (the default) /* version >= V20_delta */
     PBEc_PH        = FALSE # (the default) /* version >= V20_delta */
     revPBEx_PH     = FALSE # (the default) /* version >= V20_delta */
     PBENx_PH       = FALSE # (the default) /* version >= V20_delta */
     revPW91c_PH    = FALSE # (the default) /* version >= V20_delta */
  /PHXC_CONTROL

See [[#XC_CONTROL|namelist XC_CONTROL]] for a explanation of the keywords and further remarks.

<div class="so">

; eg. '''<tt>XC = "vwn,gga:all"</tt>'''
: it makes sense to use this clause only to calculate all (available) post-hoc energies at once (a good old feature of <tt>lcgto</tt>). Note that there is a difference beetween, say, <tt>PBE/VWN</tt> and <tt>PBE/PWLDA</tt>. I guess <tt>"gga:all"</tt> is the default in case you do not provide no options at all. Tested mainly with [#Spin_Orbit SO].

</div>
<br />

= Sample Input =

 
 [#Comments <nowiki># CO example input file V19alpha
 # TB 12.1.97</nowiki>]
 
  &[[#TASKS|TASKS]]
     TASK = "SinglePoint"
     # Allowed values are: SinglePoint GeoOpt Gradients CheckInput MakeGX
  /TASKS
  
  &[[#SYMMETRY_GROUP|SYMMETRY_GROUP]]
     POINT_GROUP = "C4V"
  /SYMMETRY_GROUP
 
  &[[#UNIQUE_ATOM_NUMBER|UNIQUE_ATOM_NUMBER]]
     N_UNIQUE_ATOMS =    2
  /UNIQUE_ATOM_NUMBER
 
  &[namelist_UNIQUE_ATOM UNIQUE_ATOM] # unique atom   1
     NAME          = "C"
     Z             = 6.000
     N_equal_atoms = 1
  /UNIQUE_ATOM
     0.000000   0.000000   1.065799
 
  &[[#UNIQUE_ATOM|UNIQUE_ATOM]] # unique atom   2
     NAME          = "O"
     Z             = 8.000
     N_equal_atoms = 1
  /UNIQUE_ATOM
     0.000000    0.000000  -1.065799
  
  &[[#MAIN_OPTIONS|MAIN_OPTIONS]]
     SPIN_RESTRICTED   = FALSE
     RELATIVISTIC      = FALSE
  /MAIN_OPTIONS
 
  &[[#RECOVER_OPTIONS|RECOVER_OPTIONS]]
     SAVE_SCFSTATE = TRUE
     READ_SCFSTATE = TRUE
     SAVE_INTERVAL = 0
  /RECOVER_OPTIONS
 
  &[[#CONVERGENCE_LIST|CONVERGENCE_LIST]]
     ENERGY_CRITERION      = 1.000E-08
     STOP_IF_NOT_CONVERGED = TRUE
  /CONVERGENCE_LIST
 
  &[[#XC_CONTROL|XC_CONTROL]]
     XC = "BP"  # Becke-Perdew GGA Exchange Potential
  /XC_CONTROL
 
  &[[#GRIDATOM|GRIDATOM]] # unique atom   1
     NRAD    =         20
     NANG    =         71
  /GRIDATOM
 
  &[[#GRIDATOM|GRIDATOM]] # unique atom   2
     NRAD    =         20
     NANG    =         71
  /GRIDATOM
 
  # [[#UNIQUE_ATOM_BASISSET|Basis Sets]]
  # use [#Include_File include files] to include bases from our library
  # location:
  # HPs:             /users/hp4/ttfs/bases
  # Power Challenge: /home/ttfs/bases
  # SP2:             /afs/lrz-muenchen.de/home/t/t3831ac/t3831ak/bases
  # VPP:             /home/t/t3831ak/bases
 
 ~/users/hp4/ttfs/bases/C_9.5.1_5.4.1
 ~/users/hp4/ttfs/bases/O_9.5.1_5.4.1
 

<br /><br />

----

<br /><br />

= Describing the Geometry =

ParaGaus allows to use the known natural symmetry of the molecule in order to reduce the computational effort. In case of SCF convergence problems due to an over-complete basis set the use of symmetry may also help.

The symmetry is also used in the input geometry description of atoms and point charges.

The atoms or charges are grouped together as so-called '''unique atoms / charges''' that share the same name, nuclear charge and (for atoms) basis set and numerical grid. Moreover, all of the atoms or charges within this group must be symmetry-equivalent, i.e. they must be the complete set of centers that can be obtained from one center within this group using the [#symmetry transformations symmetry transformations] of the [[#SYMMETRY_GROUP|chosen symmetry group]]. The atoms / charges within one unique atom / charge group are called '''symmetry equivalent atoms / charges'''.

This is used in the input. The number of unique [[#UNIQUE_ATOM_NUMBER|atoms]] / [[#POINTCHARGE_NUMBER|chE_ATOM]] / [[#POINTCHARGE|POINTCHARGE]] is used to specify the name, nuclear charge and number of equal charges and the coordinate of one equal atom / charge. The coordinates of the remaining equal atoms / charges are automatically calculated using the [#symmetry transformations symmetry transformations] of the [[#SYMMETRY_GROUP|chosen symmetry group]]. The specified number of equals is used for a cross-check only. For each unique atom, an own [[#UNIQUE_ATOM_BASISSET|basis set]] and [[#GRIDATOM|numerical grid]] must also be given.

The set of '''symmetry transformations''' within one symmetry group are not completely defined by the symmetry group alone. The location and orientation of the rotation axis, planes and centers of symmetry is still open. Therefore conventions are introduced for each symmetry group:

{| border="4"
! symmetry group
! n-fold rotation axis
! planes of symmetry
! twofold rotation axis
! rotation reflection axis
! center of symmetry
|-
| CS
|
| xy-plane
|-
| Ci
| origin
|-
| "C2" "C3" ... "C10"
| z-axis
|-
| "C2H" "C3H" ... "C10H"
| z-axis
| xy-plane
|-
| "C2V" "C3V" ... "C10V"
| z-axis
| xz-plane n-fold rotated around z-axis
|-
| "D2" "D3" ... "D10"
| z-axis
| x-axis n-fold rotated around z-axis
|-
| "D2H" "D3H" ... "D10H"
| z-axis
| xy-plane
| x-axis n-fold rotated around z-axis
|-
| "D2D" "D3D" ... "D10D"
| z-axis
| yz-plane n-fold rotated around z-axis
| x-axis n-fold rotated around z-axis
|-
| "S4" "S6" ... "S20"
| z-axis
|}

; "C1"
: no symmetry
; "Dinh"
; "T"
; "TH"
; "TD"
; "O"
; "OH"
; "I"
; "IH"

'''Warning:''' In the case of [#Geometry_Optimization Geometry Optimization] the coordinates specified in the input file are ignored and the real coordinates are taken from the [#gx_file gx file].

<br /><br />

----

<br /><br />

= Helper Programs =

The [/home/ttfs/DOCUMENTATION/DOK/paraplot.dvi paraplot] program that plots orbitals or densities in a two dimensional way is described seperately.

