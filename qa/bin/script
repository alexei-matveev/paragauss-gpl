#!/bin/bash

dir=`dirname $0`
export PATH="$dir:$PATH"

# some bash-functions, like "make_summary" and "diff_prec" taken from here:
. $dir/functions.sh

# local settings are taken from this file:
. $dir/../local.conf

# dont pipe ParaGauss output onto tty by default:
tty="file"
while [[ "$1" == --* ]]; do
	if [ "$1" == "--tty" ]; then
		# ParaGauss output will go to tty:
		tty="tty"
	fi
	if [ "$1" == "--delete" ]; then
		# ParaGauss will overwrite existing directories: 
		delete="delete"
	fi
	shift
done


# take the first entry in $versions as a reference:
if [ -z "$vers_cmp" ]; then
	# use the first of them for comparision
	vers_cmp=${versions%% *}
fi

if [ -z "$PE_HOSTFILE" ]; then
   export PE_HOSTFILE=$dir/$hostfile
fi

#[[=== run a single job by ``runtest NAME INPUT OUTDIR VERSION'' ===
run_test(){
local nam
local inp
local out
local vers
local cmd
nam=$1
inp=$2
out=$3
vers=$4

if [ -f x.$nam ]; then
  cp x.$nam gx.$nam
fi

if [ -f optimizer.input.$nam ]; then
  cp optimizer.input.$nam optimizer.input
fi

# for running a test remove (eventually) existing output directory:
rm -rf o.$nam

if [ -n "$ttfs" ]; then
  cmd="
  $ttfs $nam \
   -newinput $inp \
   -inputdir . -outputdir $out \
   -vers $vers -mpi \
   -verbose -restartable \
   -keep_datadir"
else
  cmd="$runpg $exe $inp"
fi

if [ "$tty" = "tty" ]; then
	$cmd | tee tty
else
	$cmd > tty
fi

if [ -d o.$nam ]; then
  mv o.$nam $out
fi

if [ -d $out ]; then
   if [ -f tty ]; then
     mv tty $out
   fi

   if [ -f gxfile ]; then
     mv gxfile $out/gxfile.final
   fi

   if [ -f gx.$nam ]; then
     mv gx.$nam $out
   fi

   if [ -f hesse.dat ]; then
     mv hesse.dat $out
   fi

   if [ -f hesse_cartesian.dat ]; then
     mv hesse_cartesian.dat $out
   fi

   if [ -f HESS.cart ]; then
     mv HESS.cart $out
   fi

   if [ -f grads ]; then
     mv grads $out
   fi

   if [ -f optimizer.input ]; then
     mv optimizer.input $out
   fi

   if [ -f saved_scfstate.dat ]; then
     mv saved_scfstate.dat $out
   fi
fi
} # eof run_test()
#]]=================================================================

clean_and_exit(){
  # Cntrl-C interrupt handler:
  #  renames incomplete output dir $out to $out,Interrupted
  local out
  out=$1
  echo Interrupted at $out
  rm -rf $out,Interrupted
  if [ -d $out ]; then
    mv $out $out,Interrupted
  fi
  exit 1
}

failed_cmp=""
failed_num=0
total_num=0


for name in $*; do
	name=`echo $name | sed s/^i\.//`
	inp=i.$name
	echo -n -e "Running $inp$rc_tab"
for vers in $versions; do
        exe=$exedir/mainscf_$vers
	out=o.$name,$vers
	smr=s.$name,$vers
	smr_cmp=s.$name,$vers_cmp

	echo -n " with $vers"

if [ -n "$delete" ]; then
	# delete existing direcories:
	rm -rf $out
	# delete existing summaries:
	rm -rf $smr
fi

# if directory already exists, re-generate the summary:
if [ -d $out ]; then
        echo -n " (exists)."
	make_summary $out > $smr
else
	if [ -f $smr ]; then
		echo -n "(summary)."
	fi
fi

if [ ! -f $smr ]; then
	# no summary, then invoke the test ...
	echo -n " ..."
        # move incomplete output out of the way on SIGINT (Cntrl-C):
        trap "clean_and_exit $out" INT
	run_test $name $inp $out $vers
        trap INT
        if [ -d $out ]; then
          echo -n " done."
        else
          echo -n " ????."
        fi
fi

if [ -d $out ]; then
	make_summary $out > $smr
fi

if [ "$vers" != "$vers_cmp" ]; then
	total_num=$(($total_num + 1))
	echo -n " Compare to $vers_cmp"
	ok=""
	ps=""
        echo "" > tmpdiff
	for p in $precisions; do
		echo "Test $name at precision $p. diff output:" >> tmpdiff
		diff_prec $smr_cmp $smr $p                      >> tmpdiff
		retval=$?
		#echo -n " prec $p ret $retval"
		if [ $retval != 0 ]; then
			echo -n -e " $rc_no@$p"
                        # signal the overall failure:
			ok="FAILED"
                        # append info of the failed tests:
			ps="$ps@$p"
			failed_cmp="$failed_cmp $name@$p"
                else
			echo -n -e " $rc_ok@$p"
		fi
	done
	if [ -z "$ok" ]; then
		echo -n -e " -- $rc_ok"
	else
		echo -n -e " -- $rc_failed"
                if [ -z "$terse" ]; then
                        cat tmpdiff
                fi
		failed_num=$(($failed_num + 1))
	fi
	rm -f tmpdiff
fi

done # foreach version
# new line:
echo ""
done # foreach $*

#[[=== print summary of failed tests ===
if [ -n "$failed_cmp" ]; then
	#echo -e "$rc_failed$failed_cmp!"
	for p in $precisions; do
		num=0
		lst=""
		for f in $failed_cmp; do
			if [[ "$f" == *@$p ]]; then
				num=$(($num + 1))
				lst="$lst $f"
			fi
		done
	echo -e "$rc_failed $num tests at precision $p:$lst"
	done
	echo -e "$rc_failed $failed_num of $total_num tests!"
fi
#]]=====================================

